define(['dart_sdk', 'packages/flutter_cache_manager/src/storage/cache_object.dart', 'packages/file/src/interface/link.dart', 'packages/sqflite/src/factory_impl.dart', 'packages/flutter_cache_manager/src/storage/cache_object_provider.dart', 'packages/path/src/path_set.dart', 'packages/flutter_cache_manager/src/storage/cache_info_repository.dart', 'packages/flutter_cache_manager/src/result/file_info.dart', 'packages/pedantic/pedantic.dart'], (function load__packages__flutter_cache_manager__src__cache_store_dart(dart_sdk, packages__flutter_cache_manager__src__storage__cache_object$46dart, packages__file__src__interface__link$46dart, packages__sqflite__src__factory_impl$46dart, packages__flutter_cache_manager__src__storage__cache_object_provider$46dart, packages__path__src__path_set$46dart, packages__flutter_cache_manager__src__storage__cache_info_repository$46dart, packages__flutter_cache_manager__src__result__file_info$46dart, packages__pedantic__pedantic$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const io = dart_sdk.io;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const cache_object = packages__flutter_cache_manager__src__storage__cache_object$46dart.src__storage__cache_object;
  const directory = packages__file__src__interface__link$46dart.src__interface__directory;
  const sqflite = packages__sqflite__src__factory_impl$46dart.sqflite;
  const cache_object_provider = packages__flutter_cache_manager__src__storage__cache_object_provider$46dart.src__storage__cache_object_provider;
  const path = packages__path__src__path_set$46dart.path;
  const cache_info_repository = packages__flutter_cache_manager__src__storage__cache_info_repository$46dart.src__storage__cache_info_repository;
  const file_info = packages__flutter_cache_manager__src__result__file_info$46dart.src__result__file_info;
  const pedantic = packages__pedantic__pedantic$46dart.pedantic;
  var cache_store = Object.create(dart.library);
  var $_set = dartx._set;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $clear = dartx.clear;
  var $contains = dartx.contains;
  var $add = dartx.add;
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var CacheObjectL = () => (CacheObjectL = dart.constFn(dart.legacy(cache_object.CacheObject)))();
  var FutureOfCacheObjectL = () => (FutureOfCacheObjectL = dart.constFn(async.Future$(CacheObjectL())))();
  var FutureLOfCacheObjectL = () => (FutureLOfCacheObjectL = dart.constFn(dart.legacy(FutureOfCacheObjectL())))();
  var IdentityMapOfStringL$FutureLOfCacheObjectL = () => (IdentityMapOfStringL$FutureLOfCacheObjectL = dart.constFn(_js_helper.IdentityMap$(StringL(), FutureLOfCacheObjectL())))();
  var IdentityMapOfStringL$CacheObjectL = () => (IdentityMapOfStringL$CacheObjectL = dart.constFn(_js_helper.IdentityMap$(StringL(), CacheObjectL())))();
  var DirectoryL = () => (DirectoryL = dart.constFn(dart.legacy(directory.Directory)))();
  var DirectoryLToDirectoryL = () => (DirectoryLToDirectoryL = dart.constFn(dart.fnType(DirectoryL(), [DirectoryL()])))();
  var CacheInfoRepositoryL = () => (CacheInfoRepositoryL = dart.constFn(dart.legacy(cache_info_repository.CacheInfoRepository)))();
  var FileInfoL = () => (FileInfoL = dart.constFn(dart.legacy(file_info.FileInfo)))();
  var CompleterOfCacheObjectL = () => (CompleterOfCacheObjectL = dart.constFn(async.Completer$(CacheObjectL())))();
  var FutureOfNull = () => (FutureOfNull = dart.constFn(async.Future$(core.Null)))();
  var FutureLOfNull = () => (FutureLOfNull = dart.constFn(dart.legacy(FutureOfNull())))();
  var CacheObjectLToFutureLOfNull = () => (CacheObjectLToFutureLOfNull = dart.constFn(dart.fnType(FutureLOfNull(), [CacheObjectL()])))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  const CT = Object.create(null);
  var L0 = "package:flutter_cache_manager/src/cache_store.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 10000000
      });
    }
  }, false);
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var C0;
  var _futureCache = dart.privateName(cache_store, "_futureCache");
  var _memCache = dart.privateName(cache_store, "_memCache");
  var _fileDir = dart.privateName(cache_store, "_fileDir");
  var _cacheInfoRepository = dart.privateName(cache_store, "_cacheInfoRepository");
  var _scheduledCleanup = dart.privateName(cache_store, "_scheduledCleanup");
  var _capacity$ = dart.privateName(cache_store, "_capacity");
  var _maxAge$ = dart.privateName(cache_store, "_maxAge");
  var _getObjectProvider = dart.privateName(cache_store, "_getObjectProvider");
  var _updateCacheDataInDatabase = dart.privateName(cache_store, "_updateCacheDataInDatabase");
  var _fileExists = dart.privateName(cache_store, "_fileExists");
  var _getCacheDataFromDatabase = dart.privateName(cache_store, "_getCacheDataFromDatabase");
  var _scheduleCleanup = dart.privateName(cache_store, "_scheduleCleanup");
  var _cleanupCache = dart.privateName(cache_store, "_cleanupCache");
  var _removeCachedFile = dart.privateName(cache_store, "_removeCachedFile");
  var cleanupRunMinInterval$ = dart.privateName(cache_store, "CacheStore.cleanupRunMinInterval");
  var fileDir = dart.privateName(cache_store, "CacheStore.fileDir");
  var storeKey$ = dart.privateName(cache_store, "CacheStore.storeKey");
  var lastCleanupRun = dart.privateName(cache_store, "CacheStore.lastCleanupRun");
  cache_store.CacheStore = class CacheStore extends core.Object {
    get cleanupRunMinInterval() {
      return this[cleanupRunMinInterval$];
    }
    set cleanupRunMinInterval(value) {
      this[cleanupRunMinInterval$] = value;
    }
    get fileDir() {
      return this[fileDir];
    }
    set fileDir(value) {
      this[fileDir] = value;
    }
    get storeKey() {
      return this[storeKey$];
    }
    set storeKey(value) {
      super.storeKey = value;
    }
    get lastCleanupRun() {
      return this[lastCleanupRun];
    }
    set lastCleanupRun(value) {
      this[lastCleanupRun] = value;
    }
    [_getObjectProvider]() {
      return async.async(CacheInfoRepositoryL(), (function* _getObjectProvider() {
        let databasesPath = (yield sqflite.getDatabasesPath());
        try {
          yield io.Directory.new(databasesPath).create({recursive: true});
        } catch (e) {
          let _ = dart.getThrown(e);
        }
        let provider = new cache_object_provider.CacheObjectProvider.new(path.join(databasesPath, dart.str(this.storeKey) + ".db"));
        yield provider.open();
        return provider;
      }).bind(this));
    }
    getFile(url, opts) {
      let ignoreMemCache = opts && 'ignoreMemCache' in opts ? opts.ignoreMemCache : false;
      return async.async(FileInfoL(), (function* getFile() {
        let cacheObject = (yield this.retrieveCacheData(url, {ignoreMemCache: ignoreMemCache}));
        if (cacheObject == null || cacheObject.relativePath == null) {
          return null;
        }
        let file = (yield this.fileDir).childFile(cacheObject.relativePath);
        return new file_info.FileInfo.new(file, file_info.FileSource.Cache, cacheObject.validTill, url);
      }).bind(this));
    }
    putFile(cacheObject) {
      return async.async(dart.void, (function* putFile() {
        this[_memCache][$_set](cacheObject.url, cacheObject);
        yield this[_updateCacheDataInDatabase](cacheObject);
      }).bind(this));
    }
    retrieveCacheData(url, opts) {
      let ignoreMemCache = opts && 'ignoreMemCache' in opts ? opts.ignoreMemCache : false;
      return async.async(CacheObjectL(), (function* retrieveCacheData() {
        if (!dart.test(ignoreMemCache) && dart.test(this[_memCache][$containsKey](url))) {
          if (dart.test(yield this[_fileExists](this[_memCache][$_get](url)))) {
            return this[_memCache][$_get](url);
          }
        }
        if (!dart.test(this[_futureCache][$containsKey](url))) {
          let completer = CompleterOfCacheObjectL().new();
          pedantic.unawaited(this[_getCacheDataFromDatabase](url).then(dart.void, dart.fn(cacheObject => async.async(core.Null, (function*() {
            if (cacheObject != null && !dart.test(yield this[_fileExists](cacheObject))) {
              let provider = (yield this[_cacheInfoRepository]);
              yield provider.delete(cacheObject.id);
              cacheObject = null;
            }
            this[_memCache][$_set](url, cacheObject);
            completer.complete(cacheObject);
            pedantic.unawaited(this[_futureCache][$remove](url));
          }).bind(this)), CacheObjectLToFutureLOfNull())));
          this[_futureCache][$_set](url, completer.future);
        }
        return this[_futureCache][$_get](url);
      }).bind(this));
    }
    getFileFromMemory(url) {
      if (this[_memCache][$_get](url) == null || this[_fileDir] == null) {
        return null;
      }
      let cacheObject = this[_memCache][$_get](url);
      let file = this[_fileDir].childFile(cacheObject.relativePath);
      return new file_info.FileInfo.new(file, file_info.FileSource.Cache, cacheObject.validTill, url);
    }
    [_fileExists](cacheObject) {
      return async.async(boolL(), (function* _fileExists() {
        let t1;
        if ((t1 = cacheObject, t1 == null ? null : t1.relativePath) == null) {
          return false;
        }
        let dirPath = (yield this.fileDir);
        let file = dirPath.childFile(cacheObject.relativePath);
        return file.exists();
      }).bind(this));
    }
    [_getCacheDataFromDatabase](url) {
      return async.async(CacheObjectL(), (function* _getCacheDataFromDatabase() {
        let provider = (yield this[_cacheInfoRepository]);
        let data = (yield provider.get(url));
        if (dart.test(yield this[_fileExists](data))) {
          pedantic.unawaited(this[_updateCacheDataInDatabase](data));
        }
        this[_scheduleCleanup]();
        return data;
      }).bind(this));
    }
    [_scheduleCleanup]() {
      if (this[_scheduledCleanup] != null) {
        return;
      }
      this[_scheduledCleanup] = async.Timer.new(this.cleanupRunMinInterval, dart.fn(() => {
        this[_scheduledCleanup] = null;
        this[_cleanupCache]();
      }, VoidToNull()));
    }
    [_updateCacheDataInDatabase](cacheObject) {
      return async.async(dart.dynamic, (function* _updateCacheDataInDatabase() {
        let provider = (yield this[_cacheInfoRepository]);
        return provider.updateOrInsert(cacheObject);
      }).bind(this));
    }
    [_cleanupCache]() {
      return async.async(dart.void, (function* _cleanupCache() {
        let toRemove = JSArrayOfintL().of([]);
        let provider = (yield this[_cacheInfoRepository]);
        let overCapacity = (yield provider.getObjectsOverCapacity(this[_capacity$]));
        for (let cacheObject of overCapacity) {
          pedantic.unawaited(this[_removeCachedFile](cacheObject, toRemove));
        }
        let oldObjects = (yield provider.getOldObjects(this[_maxAge$]));
        for (let cacheObject of oldObjects) {
          pedantic.unawaited(this[_removeCachedFile](cacheObject, toRemove));
        }
        yield provider.deleteAll(toRemove);
      }).bind(this));
    }
    emptyCache() {
      return async.async(dart.void, (function* emptyCache() {
        let provider = (yield this[_cacheInfoRepository]);
        let toRemove = JSArrayOfintL().of([]);
        let allObjects = (yield provider.getAllObjects());
        for (let cacheObject of allObjects) {
          pedantic.unawaited(this[_removeCachedFile](cacheObject, toRemove));
        }
        yield provider.deleteAll(toRemove);
      }).bind(this));
    }
    emptyMemoryCache() {
      this[_memCache][$clear]();
    }
    removeCachedFile(cacheObject) {
      return async.async(dart.void, (function* removeCachedFile() {
        let provider = (yield this[_cacheInfoRepository]);
        let toRemove = JSArrayOfintL().of([]);
        pedantic.unawaited(this[_removeCachedFile](cacheObject, toRemove));
        yield provider.deleteAll(toRemove);
      }).bind(this));
    }
    [_removeCachedFile](cacheObject, toRemove) {
      return async.async(dart.void, (function* _removeCachedFile() {
        if (dart.test(toRemove[$contains](cacheObject.id))) return;
        toRemove[$add](cacheObject.id);
        if (dart.test(this[_memCache][$containsKey](cacheObject.url))) {
          this[_memCache][$remove](cacheObject.url);
        }
        if (dart.test(this[_futureCache][$containsKey](cacheObject.url))) {
          pedantic.unawaited(this[_futureCache][$remove](cacheObject.url));
        }
        let file = (yield this.fileDir).childFile(cacheObject.relativePath);
        if (dart.test(yield file.exists())) {
          pedantic.unawaited(file.delete());
        }
      }).bind(this));
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        let provider = (yield this[_cacheInfoRepository]);
        yield provider.close();
      }).bind(this));
    }
  };
  (cache_store.CacheStore.new = function(basedir, storeKey, _capacity, _maxAge, opts) {
    let t0;
    let cacheRepoProvider = opts && 'cacheRepoProvider' in opts ? opts.cacheRepoProvider : null;
    let cleanupRunMinInterval = opts && 'cleanupRunMinInterval' in opts ? opts.cleanupRunMinInterval : C0 || CT.C0;
    this[_futureCache] = new (IdentityMapOfStringL$FutureLOfCacheObjectL()).new();
    this[_memCache] = new (IdentityMapOfStringL$CacheObjectL()).new();
    this[fileDir] = null;
    this[_fileDir] = null;
    this[_cacheInfoRepository] = null;
    this[lastCleanupRun] = new core.DateTime.now();
    this[_scheduledCleanup] = null;
    this[storeKey$] = storeKey;
    this[_capacity$] = _capacity;
    this[_maxAge$] = _maxAge;
    this[cleanupRunMinInterval$] = cleanupRunMinInterval;
    this.fileDir = basedir.then(DirectoryL(), dart.fn(dir => this[_fileDir] = dir, DirectoryLToDirectoryL()));
    this[_cacheInfoRepository] = (t0 = cacheRepoProvider, t0 == null ? this[_getObjectProvider]() : t0);
  }).prototype = cache_store.CacheStore.prototype;
  dart.addTypeTests(cache_store.CacheStore);
  dart.addTypeCaches(cache_store.CacheStore);
  dart.setMethodSignature(cache_store.CacheStore, () => ({
    __proto__: dart.getMethods(cache_store.CacheStore.__proto__),
    [_getObjectProvider]: dart.fnType(dart.legacy(async.Future$(dart.legacy(cache_info_repository.CacheInfoRepository))), []),
    getFile: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_info.FileInfo))), [dart.legacy(core.String)], {ignoreMemCache: dart.legacy(core.bool)}, {}),
    putFile: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(cache_object.CacheObject)]),
    retrieveCacheData: dart.fnType(dart.legacy(async.Future$(dart.legacy(cache_object.CacheObject))), [dart.legacy(core.String)], {ignoreMemCache: dart.legacy(core.bool)}, {}),
    getFileFromMemory: dart.fnType(dart.legacy(file_info.FileInfo), [dart.legacy(core.String)]),
    [_fileExists]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(cache_object.CacheObject)]),
    [_getCacheDataFromDatabase]: dart.fnType(dart.legacy(async.Future$(dart.legacy(cache_object.CacheObject))), [dart.legacy(core.String)]),
    [_scheduleCleanup]: dart.fnType(dart.void, []),
    [_updateCacheDataInDatabase]: dart.fnType(dart.legacy(async.Future), [dart.legacy(cache_object.CacheObject)]),
    [_cleanupCache]: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    emptyCache: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    emptyMemoryCache: dart.fnType(dart.void, []),
    removeCachedFile: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(cache_object.CacheObject)]),
    [_removeCachedFile]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(cache_object.CacheObject), dart.legacy(core.List$(dart.legacy(core.int)))]),
    dispose: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setLibraryUri(cache_store.CacheStore, L0);
  dart.setFieldSignature(cache_store.CacheStore, () => ({
    __proto__: dart.getFields(cache_store.CacheStore.__proto__),
    cleanupRunMinInterval: dart.fieldType(dart.legacy(core.Duration)),
    [_futureCache]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(async.Future$(dart.legacy(cache_object.CacheObject)))))),
    [_memCache]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(cache_object.CacheObject)))),
    fileDir: dart.fieldType(dart.legacy(async.Future$(dart.legacy(directory.Directory)))),
    [_fileDir]: dart.fieldType(dart.legacy(directory.Directory)),
    storeKey: dart.finalFieldType(dart.legacy(core.String)),
    [_cacheInfoRepository]: dart.fieldType(dart.legacy(async.Future$(dart.legacy(cache_info_repository.CacheInfoRepository)))),
    [_capacity$]: dart.finalFieldType(dart.legacy(core.int)),
    [_maxAge$]: dart.finalFieldType(dart.legacy(core.Duration)),
    lastCleanupRun: dart.fieldType(dart.legacy(core.DateTime)),
    [_scheduledCleanup]: dart.fieldType(dart.legacy(async.Timer))
  }));
  dart.trackLibraries("packages/flutter_cache_manager/src/cache_store.dart", {
    "package:flutter_cache_manager/src/cache_store.dart": cache_store
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["cache_store.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/flutter_cache_manager/src/cache_store.dart.lib.js"}');
  // Exports:
  return {
    src__cache_store: cache_store
  };
}));

//# sourceMappingURL=cache_store.dart.lib.js.map
