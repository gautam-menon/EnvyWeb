define(['dart_sdk', 'packages/synchronized/src/reentrant_lock.dart', 'packages/sqflite_common/src/open_options.dart', 'packages/sqflite_common/src/exception.dart', 'packages/path/src/path_set.dart', 'packages/sqflite_common/src/utils.dart', 'packages/sqflite_common/src/collection_utils.dart', 'packages/sqflite_common/utils/utils.dart', 'packages/sqflite_common/src/sql_builder.dart', 'packages/sqflite_common/src/value_utils.dart', 'packages/sqflite_common/src/constant.dart'], (function load__packages__sqflite_common__src__mixin__factory_dart(dart_sdk, packages__synchronized__src__reentrant_lock$46dart, packages__sqflite_common__src__open_options$46dart, packages__sqflite_common__src__exception$46dart, packages__path__src__path_set$46dart, packages__sqflite_common__src__utils$46dart, packages__sqflite_common__src__collection_utils$46dart, packages__sqflite_common__utils__utils$46dart, packages__sqflite_common__src__sql_builder$46dart, packages__sqflite_common__src__value_utils$46dart, packages__sqflite_common__src__constant$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const synchronized = packages__synchronized__src__reentrant_lock$46dart.synchronized;
  const sqlite_api = packages__sqflite_common__src__open_options$46dart.sqlite_api;
  const open_options = packages__sqflite_common__src__open_options$46dart.src__open_options;
  const exception = packages__sqflite_common__src__exception$46dart.src__exception;
  const path$ = packages__path__src__path_set$46dart.path;
  const utils = packages__sqflite_common__src__utils$46dart.src__utils;
  const collection_utils = packages__sqflite_common__src__collection_utils$46dart.src__collection_utils;
  const utils$ = packages__sqflite_common__utils__utils$46dart.utils__utils;
  const sql_builder = packages__sqflite_common__src__sql_builder$46dart.src__sql_builder;
  const value_utils = packages__sqflite_common__src__value_utils$46dart.src__value_utils;
  const constant = packages__sqflite_common__src__constant$46dart.src__constant;
  var factory = Object.create(dart.library);
  var factory$ = Object.create(dart.library);
  var database_mixin = Object.create(dart.library);
  var transaction = Object.create(dart.library);
  var batch = Object.create(dart.library);
  var database = Object.create(dart.library);
  var factory_mixin = Object.create(dart.library);
  var $remove = dartx.remove;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $toString = dartx.toString;
  var $map = dartx.map;
  var $addAll = dartx.addAll;
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var SqfliteDatabaseOpenHelperL = () => (SqfliteDatabaseOpenHelperL = dart.constFn(dart.legacy(database.SqfliteDatabaseOpenHelper)))();
  var IdentityMapOfStringL$SqfliteDatabaseOpenHelperL = () => (IdentityMapOfStringL$SqfliteDatabaseOpenHelperL = dart.constFn(_js_helper.IdentityMap$(StringL(), SqfliteDatabaseOpenHelperL())))();
  var SqfliteDatabaseMixinL = () => (SqfliteDatabaseMixinL = dart.constFn(dart.legacy(database_mixin.SqfliteDatabaseMixin)))();
  var FutureOfNull = () => (FutureOfNull = dart.constFn(async.Future$(core.Null)))();
  var FutureLOfNull = () => (FutureLOfNull = dart.constFn(dart.legacy(FutureOfNull())))();
  var VoidToFutureLOfNull = () => (VoidToFutureLOfNull = dart.constFn(dart.fnType(FutureLOfNull(), [])))();
  var DatabaseL = () => (DatabaseL = dart.constFn(dart.legacy(sqlite_api.Database)))();
  var StringLToSqfliteDatabaseOpenHelperL = () => (StringLToSqfliteDatabaseOpenHelperL = dart.constFn(dart.fnType(SqfliteDatabaseOpenHelperL(), [StringL()])))();
  var SqfliteDatabaseOpenHelperLTovoid = () => (SqfliteDatabaseOpenHelperLTovoid = dart.constFn(dart.fnType(dart.void, [SqfliteDatabaseOpenHelperL()])))();
  var SqfliteDatabaseL = () => (SqfliteDatabaseL = dart.constFn(dart.legacy(database.SqfliteDatabase)))();
  var FutureOfSqfliteDatabaseL = () => (FutureOfSqfliteDatabaseL = dart.constFn(async.Future$(SqfliteDatabaseL())))();
  var FutureLOfSqfliteDatabaseL = () => (FutureLOfSqfliteDatabaseL = dart.constFn(dart.legacy(FutureOfSqfliteDatabaseL())))();
  var VoidToFutureLOfSqfliteDatabaseL = () => (VoidToFutureLOfSqfliteDatabaseL = dart.constFn(dart.fnType(FutureLOfSqfliteDatabaseL(), [])))();
  var IdentityMapOfStringL$dynamic = () => (IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(StringL(), dart.dynamic)))();
  var FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
  var FutureLOfvoid = () => (FutureLOfvoid = dart.constFn(dart.legacy(FutureOfvoid())))();
  var VoidToFutureLOfvoid = () => (VoidToFutureLOfvoid = dart.constFn(dart.fnType(FutureLOfvoid(), [])))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var MapL = () => (MapL = dart.constFn(dart.legacy(core.Map)))();
  var SqfliteDatabaseDebugInfoL = () => (SqfliteDatabaseDebugInfoL = dart.constFn(dart.legacy(factory_mixin.SqfliteDatabaseDebugInfo)))();
  var MapEntryOfStringL$SqfliteDatabaseDebugInfoL = () => (MapEntryOfStringL$SqfliteDatabaseDebugInfoL = dart.constFn(core.MapEntry$(StringL(), SqfliteDatabaseDebugInfoL())))();
  var MapEntryLOfStringL$SqfliteDatabaseDebugInfoL = () => (MapEntryLOfStringL$SqfliteDatabaseDebugInfoL = dart.constFn(dart.legacy(MapEntryOfStringL$SqfliteDatabaseDebugInfoL())))();
  var dynamicAnddynamicToMapEntryLOfStringL$SqfliteDatabaseDebugInfoL = () => (dynamicAnddynamicToMapEntryLOfStringL$SqfliteDatabaseDebugInfoL = dart.constFn(dart.fnType(MapEntryLOfStringL$SqfliteDatabaseDebugInfoL(), [dart.dynamic, dart.dynamic])))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var SqfliteDebugInfoL = () => (SqfliteDebugInfoL = dart.constFn(dart.legacy(factory_mixin.SqfliteDebugInfo)))();
  var VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
  var TransactionL = () => (TransactionL = dart.constFn(dart.legacy(sqlite_api.Transaction)))();
  var FutureOfintL = () => (FutureOfintL = dart.constFn(async.Future$(intL())))();
  var FutureLOfintL = () => (FutureLOfintL = dart.constFn(dart.legacy(FutureOfintL())))();
  var TransactionLToFutureLOfintL = () => (TransactionLToFutureLOfintL = dart.constFn(dart.fnType(FutureLOfintL(), [TransactionL()])))();
  var MapOfStringL$dynamic = () => (MapOfStringL$dynamic = dart.constFn(core.Map$(StringL(), dart.dynamic)))();
  var MapLOfStringL$dynamic = () => (MapLOfStringL$dynamic = dart.constFn(dart.legacy(MapOfStringL$dynamic())))();
  var ListOfMapLOfStringL$dynamic = () => (ListOfMapLOfStringL$dynamic = dart.constFn(core.List$(MapLOfStringL$dynamic())))();
  var ListLOfMapLOfStringL$dynamic = () => (ListLOfMapLOfStringL$dynamic = dart.constFn(dart.legacy(ListOfMapLOfStringL$dynamic())))();
  var FutureOfListLOfMapLOfStringL$dynamic = () => (FutureOfListLOfMapLOfStringL$dynamic = dart.constFn(async.Future$(ListLOfMapLOfStringL$dynamic())))();
  var FutureLOfListLOfMapLOfStringL$dynamic = () => (FutureLOfListLOfMapLOfStringL$dynamic = dart.constFn(dart.legacy(FutureOfListLOfMapLOfStringL$dynamic())))();
  var TransactionLToFutureLOfListLOfMapLOfStringL$dynamic = () => (TransactionLToFutureLOfListLOfMapLOfStringL$dynamic = dart.constFn(dart.fnType(FutureLOfListLOfMapLOfStringL$dynamic(), [TransactionL()])))();
  var ListL = () => (ListL = dart.constFn(dart.legacy(core.List)))();
  var BatchResultsL = () => (BatchResultsL = dart.constFn(dart.legacy(collection_utils.BatchResults)))();
  var FutureOfBatchResultsL = () => (FutureOfBatchResultsL = dart.constFn(async.Future$(BatchResultsL())))();
  var FutureLOfBatchResultsL = () => (FutureLOfBatchResultsL = dart.constFn(dart.legacy(FutureOfBatchResultsL())))();
  var TransactionLToFutureLOfBatchResultsL = () => (TransactionLToFutureLOfBatchResultsL = dart.constFn(dart.fnType(FutureLOfBatchResultsL(), [TransactionL()])))();
  var SqfliteTransactionL = () => (SqfliteTransactionL = dart.constFn(dart.legacy(transaction.SqfliteTransaction)))();
  var TransactionLToFutureLOfNull = () => (TransactionLToFutureLOfNull = dart.constFn(dart.fnType(FutureLOfNull(), [TransactionL()])))();
  var DatabaseLAndintLAndintLToFutureLOfvoid = () => (DatabaseLAndintLAndintLToFutureLOfvoid = dart.constFn(dart.fnType(FutureLOfvoid(), [DatabaseL(), intL(), intL()])))();
  var JSArrayOfMapLOfStringL$dynamic = () => (JSArrayOfMapLOfStringL$dynamic = dart.constFn(_interceptors.JSArray$(MapLOfStringL$dynamic())))();
  var FutureOfListL = () => (FutureOfListL = dart.constFn(async.Future$(ListL())))();
  var FutureLOfListL = () => (FutureLOfListL = dart.constFn(dart.legacy(FutureOfListL())))();
  var TransactionLToFutureLOfListL = () => (TransactionLToFutureLOfListL = dart.constFn(dart.fnType(FutureLOfListL(), [TransactionL()])))();
  var MapEntryOfStringL$MapLOfStringL$dynamic = () => (MapEntryOfStringL$MapLOfStringL$dynamic = dart.constFn(core.MapEntry$(StringL(), MapLOfStringL$dynamic())))();
  var MapEntryLOfStringL$MapLOfStringL$dynamic = () => (MapEntryLOfStringL$MapLOfStringL$dynamic = dart.constFn(dart.legacy(MapEntryOfStringL$MapLOfStringL$dynamic())))();
  var StringLAndSqfliteDatabaseDebugInfoLToMapEntryLOfStringL$MapLOfStringL$dynamic = () => (StringLAndSqfliteDatabaseDebugInfoLToMapEntryLOfStringL$MapLOfStringL$dynamic = dart.constFn(dart.fnType(MapEntryLOfStringL$MapLOfStringL$dynamic(), [StringL(), SqfliteDatabaseDebugInfoL()])))();
  const CT = Object.create(null);
  var L2 = "package:sqflite_common/src/factory_mixin.dart";
  var L0 = "package:sqflite_common/src/mixin/factory.dart";
  var L3 = "package:sqflite_common/src/factory.dart";
  var L7 = "package:sqflite_common/src/database.dart";
  var L6 = "package:sqflite_common/src/batch.dart";
  var L1 = "file:///C:/Users/HP/Downloads/flutter/.pub-cache/hosted/pub.dartlang.org/sqflite_common-1.0.2+1/lib/src/factory_mixin.dart";
  var L4 = "package:sqflite_common/src/database_mixin.dart";
  var L5 = "package:sqflite_common/src/transaction.dart";
  factory.SqfliteInvokeHandler = class SqfliteInvokeHandler extends core.Object {};
  (factory.SqfliteInvokeHandler.new = function() {
    ;
  }).prototype = factory.SqfliteInvokeHandler.prototype;
  dart.addTypeTests(factory.SqfliteInvokeHandler);
  dart.addTypeCaches(factory.SqfliteInvokeHandler);
  dart.setLibraryUri(factory.SqfliteInvokeHandler, L0);
  var _invokeMethod$ = dart.privateName(factory, "_invokeMethod");
  var _databasesPath = dart.privateName(factory_mixin, "_databasesPath");
  var databaseOpenHelpers = dart.privateName(factory_mixin, "SqfliteDatabaseFactoryMixin.databaseOpenHelpers");
  var nullDatabaseOpenHelper = dart.privateName(factory_mixin, "SqfliteDatabaseFactoryMixin.nullDatabaseOpenHelper");
  var lock = dart.privateName(factory_mixin, "SqfliteDatabaseFactoryMixin.lock");
  factory_mixin.SqfliteDatabaseFactoryMixin = class SqfliteDatabaseFactoryMixin extends core.Object {};
  factory_mixin.SqfliteDatabaseFactoryMixin[dart.mixinOn] = Object => class SqfliteDatabaseFactoryMixin extends Object {
    get databaseOpenHelpers() {
      return this[databaseOpenHelpers];
    }
    set databaseOpenHelpers(value) {
      this[databaseOpenHelpers] = value;
    }
    get nullDatabaseOpenHelper() {
      return this[nullDatabaseOpenHelper];
    }
    set nullDatabaseOpenHelper(value) {
      this[nullDatabaseOpenHelper] = value;
    }
    get lock() {
      return this[lock];
    }
    set lock(value) {
      super.lock = value;
    }
    wrapDatabaseException(T, action) {
      return action();
    }
    safeInvokeMethod(T, method, $arguments = null) {
      return this.wrapDatabaseException(dart.legacy(T), dart.fn(() => this.invokeMethod(dart.legacy(T), method, $arguments), dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [])));
    }
    newDatabase(openHelper, path) {
      return new database_mixin.SqfliteDatabaseBase.new(openHelper, path);
    }
    removeDatabaseOpenHelper(path) {
      if (path == null) {
        this.nullDatabaseOpenHelper = null;
      } else {
        this.databaseOpenHelpers[$remove](path);
      }
    }
    closeDatabase(database) {
      return this.lock.synchronized(dart.void, dart.fn(() => async.async(core.Null, (function*() {
        let t0, t0$;
        yield SqfliteDatabaseMixinL().as(database).openHelper.closeDatabase(database);
        if (!dart.equals((t0$ = (t0 = database, t0 == null ? null : t0.options), t0$ == null ? null : t0$.singleInstance), false)) {
          this.removeDatabaseOpenHelper(database.path);
        }
      }).bind(this)), VoidToFutureLOfNull()));
    }
    openDatabase(path, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      return this.lock.synchronized(DatabaseL(), dart.fn(() => async.async(SqfliteDatabaseL(), (function*() {
        let t0;
        path = (yield this.fixPath(path));
        options == null ? options = new open_options.SqfliteOpenDatabaseOptions.new() : null;
        if (!dart.equals((t0 = options, t0 == null ? null : t0.singleInstance), false)) {
          const getExistingDatabaseOpenHelper = path => {
            if (path != null) {
              return this.databaseOpenHelpers[$_get](path);
            } else {
              return this.nullDatabaseOpenHelper;
            }
          };
          dart.fn(getExistingDatabaseOpenHelper, StringLToSqfliteDatabaseOpenHelperL());
          const setDatabaseOpenHelper = helper => {
            if (path == null) {
              this.nullDatabaseOpenHelper = helper;
            } else {
              if (helper == null) {
                this.databaseOpenHelpers[$remove](path);
              } else {
                this.databaseOpenHelpers[$_set](path, helper);
              }
            }
          };
          dart.fn(setDatabaseOpenHelper, SqfliteDatabaseOpenHelperLTovoid());
          let databaseOpenHelper = getExistingDatabaseOpenHelper(path);
          let firstOpen = databaseOpenHelper == null;
          if (firstOpen) {
            databaseOpenHelper = new database.SqfliteDatabaseOpenHelper.new(this, path, options);
            setDatabaseOpenHelper(databaseOpenHelper);
          }
          try {
            return yield databaseOpenHelper.openDatabase();
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (firstOpen) {
              this.removeDatabaseOpenHelper(path);
            }
            dart.rethrow(e$);
          }
        } else {
          let databaseOpenHelper = new database.SqfliteDatabaseOpenHelper.new(this, path, options);
          return yield databaseOpenHelper.openDatabase();
        }
      }).bind(this)), VoidToFutureLOfSqfliteDatabaseL()));
    }
    deleteDatabase(path) {
      return async.async(dart.void, (function* deleteDatabase() {
        return this.lock.synchronized(dart.void, dart.fn(() => async.async(dart.void, (function*() {
          path = (yield this.fixPath(path));
          this.removeDatabaseOpenHelper(path);
          return this.safeInvokeMethod(dart.void, "deleteDatabase", new (IdentityMapOfStringL$dynamic()).from(["path", path]));
        }).bind(this)), VoidToFutureLOfvoid()));
      }).bind(this));
    }
    databaseExists(path) {
      return async.async(boolL(), (function* databaseExists() {
        path = (yield this.fixPath(path));
        return this.safeInvokeMethod(boolL(), "databaseExists", new (IdentityMapOfStringL$dynamic()).from(["path", path]));
      }).bind(this));
    }
    getDatabasesPath() {
      return async.async(StringL(), (function* getDatabasesPath() {
        if (this[_databasesPath] == null) {
          let path = (yield this.safeInvokeMethod(StringL(), "getDatabasesPath"));
          if (path == null) {
            dart.throw(new exception.SqfliteDatabaseException.new("getDatabasesPath is null", null));
          }
          this[_databasesPath] = path;
        }
        return this[_databasesPath];
      }).bind(this));
    }
    setDatabasesPath(path) {
      return async.async(dart.void, (function* setDatabasesPath() {
        this[_databasesPath] = path;
      }).bind(this));
    }
    fixPath(path) {
      return async.async(StringL(), (function* fixPath() {
        if (!(path != null)) dart.assertFailed("path cannot be null", L1, 159, 12, "path != null");
        if (path === ":memory:") {
        } else {
          if (dart.test(path$.isRelative(path))) {
            path = path$.join(yield this.getDatabasesPath(), path);
          }
          path = path$.absolute(path$.normalize(path));
        }
        return path;
      }).bind(this));
    }
    isPath(path) {
      return path != null && path !== ":memory:";
    }
    getDebugInfo() {
      return async.async(SqfliteDebugInfoL(), (function* getDebugInfo() {
        let info = new factory_mixin.SqfliteDebugInfo.new();
        let map = (yield this.safeInvokeMethod(dart.dynamic, "debug", new (IdentityMapOfStringL$dynamic()).from(["cmd", "get"])));
        let databasesMap = dart.dsend(map, '_get', ["databases"]);
        if (MapL().is(databasesMap)) {
          info.databases = databasesMap[$map](StringL(), SqfliteDatabaseDebugInfoL(), dart.fn((id, info) => {
            let t1, t1$;
            let dbInfo = new factory_mixin.SqfliteDatabaseDebugInfo.new();
            let databaseId = (t1 = id, t1 == null ? null : dart.toString(t1));
            if (MapL().is(info)) {
              t1$ = dbInfo;
              t1$ === null ? null : t1$.fromMap(info);
            }
            return new (MapEntryOfStringL$SqfliteDatabaseDebugInfoL()).__(databaseId, dbInfo);
          }, dynamicAnddynamicToMapEntryLOfStringL$SqfliteDatabaseDebugInfoL()));
        }
        info.logLevel = intL().as(dart.dsend(map, '_get', ["logLevel"]));
        return info;
      }).bind(this));
    }
  };
  (factory_mixin.SqfliteDatabaseFactoryMixin[dart.mixinNew] = function() {
    this[databaseOpenHelpers] = new (IdentityMapOfStringL$SqfliteDatabaseOpenHelperL()).new();
    this[nullDatabaseOpenHelper] = null;
    this[lock] = synchronized.Lock.new({reentrant: true});
    this[_databasesPath] = null;
  }).prototype = factory_mixin.SqfliteDatabaseFactoryMixin.prototype;
  dart.addTypeTests(factory_mixin.SqfliteDatabaseFactoryMixin);
  dart.addTypeCaches(factory_mixin.SqfliteDatabaseFactoryMixin);
  factory_mixin.SqfliteDatabaseFactoryMixin[dart.implements] = () => [factory$.SqfliteDatabaseFactory, factory.SqfliteInvokeHandler, core.Object];
  dart.setMethodSignature(factory_mixin.SqfliteDatabaseFactoryMixin, () => ({
    __proto__: dart.getMethods(factory_mixin.SqfliteDatabaseFactoryMixin.__proto__),
    wrapDatabaseException: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), []))]]),
    safeInvokeMethod: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(core.String)], [dart.dynamic]]),
    newDatabase: dart.fnType(dart.legacy(database.SqfliteDatabase), [dart.legacy(database.SqfliteDatabaseOpenHelper), dart.legacy(core.String)]),
    removeDatabaseOpenHelper: dart.fnType(dart.void, [dart.legacy(core.String)]),
    closeDatabase: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(database.SqfliteDatabase)]),
    openDatabase: dart.fnType(dart.legacy(async.Future$(dart.legacy(sqlite_api.Database))), [dart.legacy(core.String)], {options: dart.legacy(sqlite_api.OpenDatabaseOptions)}, {}),
    deleteDatabase: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)]),
    databaseExists: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(core.String)]),
    getDatabasesPath: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    setDatabasesPath: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)]),
    fixPath: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [dart.legacy(core.String)]),
    isPath: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    getDebugInfo: dart.fnType(dart.legacy(async.Future$(dart.legacy(factory_mixin.SqfliteDebugInfo))), [])
  }));
  dart.setLibraryUri(factory_mixin.SqfliteDatabaseFactoryMixin, L2);
  dart.setFieldSignature(factory_mixin.SqfliteDatabaseFactoryMixin, () => ({
    __proto__: dart.getFields(factory_mixin.SqfliteDatabaseFactoryMixin.__proto__),
    databaseOpenHelpers: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(database.SqfliteDatabaseOpenHelper)))),
    nullDatabaseOpenHelper: dart.fieldType(dart.legacy(database.SqfliteDatabaseOpenHelper)),
    lock: dart.finalFieldType(dart.legacy(synchronized.Lock)),
    [_databasesPath]: dart.fieldType(dart.legacy(core.String))
  }));
  const Object_SqfliteDatabaseFactoryMixin$36 = class Object_SqfliteDatabaseFactoryMixin extends core.Object {};
  (Object_SqfliteDatabaseFactoryMixin$36.new = function() {
    factory_mixin.SqfliteDatabaseFactoryMixin[dart.mixinNew].call(this);
  }).prototype = Object_SqfliteDatabaseFactoryMixin$36.prototype;
  dart.applyMixin(Object_SqfliteDatabaseFactoryMixin$36, factory_mixin.SqfliteDatabaseFactoryMixin);
  factory._SqfliteDatabaseFactoryImpl = class _SqfliteDatabaseFactoryImpl extends Object_SqfliteDatabaseFactoryMixin$36 {
    invokeMethod(T, method, $arguments = null) {
      return async.async(dart.legacy(T), (function* invokeMethod() {
        let t1, t0;
        return dart.legacy(T).as(yield (t0 = method, t1 = $arguments, this[_invokeMethod$](t0, t1)));
      }).bind(this));
    }
  };
  (factory._SqfliteDatabaseFactoryImpl.new = function(_invokeMethod) {
    this[_invokeMethod$] = _invokeMethod;
    factory._SqfliteDatabaseFactoryImpl.__proto__.new.call(this);
    ;
  }).prototype = factory._SqfliteDatabaseFactoryImpl.prototype;
  dart.addTypeTests(factory._SqfliteDatabaseFactoryImpl);
  dart.addTypeCaches(factory._SqfliteDatabaseFactoryImpl);
  factory._SqfliteDatabaseFactoryImpl[dart.implements] = () => [factory.SqfliteInvokeHandler];
  dart.setMethodSignature(factory._SqfliteDatabaseFactoryImpl, () => ({
    __proto__: dart.getMethods(factory._SqfliteDatabaseFactoryImpl.__proto__),
    invokeMethod: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(core.String)], [dart.dynamic]])
  }));
  dart.setLibraryUri(factory._SqfliteDatabaseFactoryImpl, L0);
  dart.setFieldSignature(factory._SqfliteDatabaseFactoryImpl, () => ({
    __proto__: dart.getFields(factory._SqfliteDatabaseFactoryImpl.__proto__),
    [_invokeMethod$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)], [dart.dynamic])))
  }));
  factory.buildDatabaseFactory = function buildDatabaseFactory(opts) {
    let invokeMethod = opts && 'invokeMethod' in opts ? opts.invokeMethod : null;
    let impl = new factory._SqfliteDatabaseFactoryImpl.new(invokeMethod);
    return impl;
  };
  var lock$ = dart.privateName(factory$, "SqfliteDatabaseFactory.lock");
  factory$.SqfliteDatabaseFactory = class SqfliteDatabaseFactory extends core.Object {
    get lock() {
      return this[lock$];
    }
    set lock(value) {
      super.lock = value;
    }
  };
  (factory$.SqfliteDatabaseFactory.new = function() {
    this[lock$] = synchronized.Lock.new();
    ;
  }).prototype = factory$.SqfliteDatabaseFactory.prototype;
  dart.addTypeTests(factory$.SqfliteDatabaseFactory);
  dart.addTypeCaches(factory$.SqfliteDatabaseFactory);
  factory$.SqfliteDatabaseFactory[dart.implements] = () => [sqlite_api.DatabaseFactory, factory.SqfliteInvokeHandler];
  dart.setLibraryUri(factory$.SqfliteDatabaseFactory, L3);
  dart.setFieldSignature(factory$.SqfliteDatabaseFactory, () => ({
    __proto__: dart.getFields(factory$.SqfliteDatabaseFactory.__proto__),
    lock: dart.finalFieldType(dart.legacy(synchronized.Lock))
  }));
  var _closeLock = dart.privateName(database_mixin, "_closeLock");
  var _runTransaction = dart.privateName(database_mixin, "_runTransaction");
  var _closeDatabase = dart.privateName(database_mixin, "_closeDatabase");
  var openHelper = dart.privateName(database_mixin, "SqfliteDatabaseMixin.openHelper");
  var options = dart.privateName(database_mixin, "SqfliteDatabaseMixin.options");
  var isClosed = dart.privateName(database_mixin, "SqfliteDatabaseMixin.isClosed");
  var path = dart.privateName(database_mixin, "SqfliteDatabaseMixin.path");
  var transactionRefCount = dart.privateName(database_mixin, "SqfliteDatabaseMixin.transactionRefCount");
  var openTransaction = dart.privateName(database_mixin, "SqfliteDatabaseMixin.openTransaction");
  var rawLock = dart.privateName(database_mixin, "SqfliteDatabaseMixin.rawLock");
  var id = dart.privateName(database_mixin, "SqfliteDatabaseMixin.id");
  var inTransaction = dart.privateName(database_mixin, "SqfliteDatabaseMixin.inTransaction");
  database_mixin.SqfliteDatabaseMixin = class SqfliteDatabaseMixin extends core.Object {
    static getBaseDatabaseMethodArguments(id) {
      let map = new (IdentityMapOfStringL$dynamic()).from(["id", id]);
      return map;
    }
    static getBaseDatabaseMethodArgumentsInTransaction(id, inTransaction) {
      let map = database_mixin.SqfliteDatabaseMixin.getBaseDatabaseMethodArguments(id);
      if (inTransaction != null) {
        map[$_set]("inTransaction", inTransaction);
      }
      return map;
    }
  };
  database_mixin.SqfliteDatabaseMixin[dart.mixinOn] = Object => {
    class SqfliteDatabaseMixin extends Object {
      get openHelper() {
        return this[openHelper];
      }
      set openHelper(value) {
        this[openHelper] = value;
      }
      get options() {
        return this[options];
      }
      set options(value) {
        this[options] = value;
      }
      get isClosed() {
        return this[isClosed];
      }
      set isClosed(value) {
        this[isClosed] = value;
      }
      get path() {
        return this[path];
      }
      set path(value) {
        this[path] = value;
      }
      get transactionRefCount() {
        return this[transactionRefCount];
      }
      set transactionRefCount(value) {
        this[transactionRefCount] = value;
      }
      get openTransaction() {
        return this[openTransaction];
      }
      set openTransaction(value) {
        this[openTransaction] = value;
      }
      get rawLock() {
        return this[rawLock];
      }
      set rawLock(value) {
        super.rawLock = value;
      }
      get id() {
        return this[id];
      }
      set id(value) {
        this[id] = value;
      }
      get inTransaction() {
        return this[inTransaction];
      }
      set inTransaction(value) {
        this[inTransaction] = value;
      }
      safeInvokeMethod(T, method, $arguments = null) {
        return this.factory.wrapDatabaseException(dart.legacy(T), dart.fn(() => this.invokeMethod(dart.legacy(T), method, $arguments), dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [])));
      }
      get factory() {
        return this.openHelper.factory;
      }
      get readOnly() {
        let t1, t1$;
        return dart.equals((t1$ = (t1 = this.openHelper, t1 == null ? null : t1.options), t1$ == null ? null : t1$.readOnly), true);
      }
      get db() {
        return this;
      }
      get isOpen() {
        return this.openHelper.isOpen;
      }
      get txn() {
        return this.openTransaction;
      }
      get baseDatabaseMethodArguments() {
        return database_mixin.SqfliteDatabaseMixin.getBaseDatabaseMethodArguments(this.id);
      }
      batch() {
        return new batch.SqfliteDatabaseBatch.new(this);
      }
      checkNotClosed() {
        if (dart.test(this.isClosed)) {
          dart.throw(new exception.SqfliteDatabaseException.new("error database_closed", null));
        }
      }
      invokeMethod(T, method, $arguments = null) {
        return this.factory.invokeMethod(dart.legacy(T), method, $arguments);
      }
      devInvokeMethod(T, method, $arguments = null) {
        let t1, t1$;
        return this.invokeMethod(dart.legacy(T), method, (t1$ = (t1 = $arguments, t1 == null ? new (IdentityMapOfStringL$dynamic()).new() : t1), (() => {
          dart.dsend(t1$, 'addAll', [this.baseDatabaseMethodArguments]);
          return t1$;
        })()));
      }
      devInvokeSqlMethod(T, method, sql, $arguments = null) {
        return this.devInvokeMethod(dart.legacy(T), method, new (IdentityMapOfStringL$dynamic()).from(["sql", sql, "arguments", $arguments]));
      }
      txnSynchronized(T, txn, action) {
        return async.async(dart.legacy(T), (function* txnSynchronized() {
          if (txn != null) {
            return yield action(txn);
          } else {
            let handleTimeoutWarning = utils.lockWarningDuration != null && utils.lockWarningCallback != null;
            let timeoutCompleter = null;
            if (handleTimeoutWarning) {
              timeoutCompleter = async.Completer.new();
            }
            let operation = this.rawLock.synchronized(dart.legacy(T), dart.fn(() => {
              if (handleTimeoutWarning) {
                timeoutCompleter.complete();
              }
              return action(txn);
            }, dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [])));
            if (handleTimeoutWarning) {
              timeoutCompleter.future.timeout(utils.lockWarningDuration, {onTimeout: dart.fn(() => {
                  utils.lockWarningCallback();
                }, VoidToNull())});
            }
            return yield operation;
          }
        }).bind(this));
      }
      txnWriteSynchronized(T, txn, action) {
        return this.txnSynchronized(dart.legacy(T), txn, action);
      }
      txnExecute(T, txn, sql, $arguments = null) {
        return this.txnWriteSynchronized(dart.legacy(T), txn, dart.fn(_ => {
          let t1;
          let inTransactionChange = utils.getSqlInTransactionArgument(sql);
          if (dart.test((t1 = inTransactionChange, t1 == null ? false : t1))) {
            inTransactionChange = true;
            this.inTransaction = true;
          } else if (dart.equals(inTransactionChange, false)) {
            inTransactionChange = false;
            this.inTransaction = false;
          }
          return this.invokeExecute(dart.legacy(T), sql, $arguments, {inTransactionChange: inTransactionChange});
        }, dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [TransactionL()])));
      }
      invokeExecute(T, sql, $arguments, opts) {
        let t1;
        let inTransactionChange = opts && 'inTransactionChange' in opts ? opts.inTransactionChange : null;
        return this.safeInvokeMethod(dart.legacy(T), "execute", (t1 = new (IdentityMapOfStringL$dynamic()).from(["sql", sql, "arguments", $arguments]), (() => {
          t1[$addAll](database_mixin.SqfliteDatabaseMixin.getBaseDatabaseMethodArgumentsInTransaction(this.id, inTransactionChange));
          return t1;
        })()));
      }
      txnRawInsert(txn, sql, $arguments) {
        return this.txnWriteSynchronized(intL(), txn, dart.fn(_ => {
          let t1;
          return this.safeInvokeMethod(intL(), "insert", (t1 = new (IdentityMapOfStringL$dynamic()).from(["sql", sql, "arguments", $arguments]), (() => {
            t1[$addAll](this.baseDatabaseMethodArguments);
            return t1;
          })()));
        }, TransactionLToFutureLOfintL()));
      }
      txnRawQuery(txn, sql, $arguments) {
        return this.txnSynchronized(ListLOfMapLOfStringL$dynamic(), txn, dart.fn(_ => async.async(ListLOfMapLOfStringL$dynamic(), (function*() {
          let t1;
          let result = (yield this.safeInvokeMethod(dart.dynamic, "query", (t1 = new (IdentityMapOfStringL$dynamic()).from(["sql", sql, "arguments", $arguments]), (() => {
            t1[$addAll](this.baseDatabaseMethodArguments);
            return t1;
          })())));
          return collection_utils.queryResultToList(result);
        }).bind(this)), TransactionLToFutureLOfListLOfMapLOfStringL$dynamic()));
      }
      txnRawUpdate(txn, sql, $arguments) {
        return this.txnWriteSynchronized(intL(), txn, dart.fn(_ => {
          let t1;
          return this.safeInvokeMethod(intL(), "update", (t1 = new (IdentityMapOfStringL$dynamic()).from(["sql", sql, "arguments", $arguments]), (() => {
            t1[$addAll](this.baseDatabaseMethodArguments);
            return t1;
          })()));
        }, TransactionLToFutureLOfintL()));
      }
      txnApplyBatch(txn, batch, opts) {
        let noResult = opts && 'noResult' in opts ? opts.noResult : null;
        let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
        return this.txnWriteSynchronized(ListL(), txn, dart.fn(_ => async.async(BatchResultsL(), (function*() {
          let t1;
          let $arguments = (t1 = new (IdentityMapOfStringL$dynamic()).from(["operations", batch.operations]), (() => {
            t1[$addAll](this.baseDatabaseMethodArguments);
            return t1;
          })());
          if (dart.equals(noResult, true)) {
            $arguments[$_set]("noResult", noResult);
          }
          if (dart.equals(continueOnError, true)) {
            $arguments[$_set]("continueOnError", continueOnError);
          }
          let results = (yield this.safeInvokeMethod(ListL(), "batch", $arguments));
          if (results == null) {
            return null;
          }
          return new collection_utils.BatchResults.from(results);
        }).bind(this)), TransactionLToFutureLOfBatchResultsL()));
      }
      beginTransaction(opts) {
        let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
        return async.async(SqfliteTransactionL(), (function* beginTransaction() {
          let txn = new transaction.SqfliteTransaction.new(this);
          if (!dart.equals(this.readOnly, true)) {
            if (dart.equals(exclusive, true)) {
              yield this.txnExecute(dart.dynamic, txn, "BEGIN EXCLUSIVE");
            } else {
              yield this.txnExecute(dart.dynamic, txn, "BEGIN IMMEDIATE");
            }
          }
          return txn;
        }).bind(this));
      }
      endTransaction(txn) {
        return async.async(dart.void, (function* endTransaction() {
          if (!dart.equals(this.readOnly, true)) {
            if (dart.equals(txn.successful, true)) {
              yield this.txnExecute(dart.dynamic, txn, "COMMIT");
            } else {
              yield this.txnExecute(dart.dynamic, txn, "ROLLBACK");
            }
          }
        }).bind(this));
      }
      [_runTransaction](T, txn, action, opts) {
        let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
        return async.async(dart.legacy(T), (function* _runTransaction() {
          let t1;
          let successfull = null;
          if ((t1 = this.transactionRefCount, this.transactionRefCount = dart.notNull(t1) + 1, t1) === 0) {
            txn = (yield this.beginTransaction({exclusive: exclusive}));
          }
          let result = null;
          try {
            result = (yield action(txn));
            successfull = true;
          } finally {
            if ((this.transactionRefCount = dart.notNull(this.transactionRefCount) - 1) === 0) {
              let sqfliteTransaction = SqfliteTransactionL().as(txn);
              sqfliteTransaction.successful = successfull;
              yield this.endTransaction(sqfliteTransaction);
            }
          }
          return result;
        }).bind(this));
      }
      transaction(T, action, opts) {
        let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
        this.checkNotClosed();
        return this.txnWriteSynchronized(dart.legacy(T), this.txn, dart.fn(txn => async.async(dart.legacy(T), (function*() {
          return this[_runTransaction](dart.legacy(T), txn, action, {exclusive: exclusive});
        }).bind(this)), dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [TransactionL()])));
      }
      getVersion() {
        return async.async(intL(), (function* getVersion() {
          let rows = (yield this.rawQuery("PRAGMA user_version"));
          return utils$.firstIntValue(rows);
        }).bind(this));
      }
      setVersion(version) {
        return async.async(dart.void, (function* setVersion() {
          yield this.execute("PRAGMA user_version = " + dart.str(version));
        }).bind(this));
      }
      close() {
        return this.factory.closeDatabase(this);
      }
      doClose() {
        return this[_closeDatabase](this.id);
      }
      toString() {
        return dart.str(this.id) + " " + dart.str(this.path);
      }
      openDatabase() {
        return async.async(intL(), (function* openDatabase() {
          let t1, t1$, t1$0, t2;
          let params = new (IdentityMapOfStringL$dynamic()).from(["path", this.path]);
          if (dart.equals(this.readOnly, true)) {
            params[$_set]("readOnly", true);
          }
          let singleInstance = (t1$ = (t1 = this.options, t1 == null ? null : t1.singleInstance), t1$ == null ? false : t1$);
          params[$_set]("singleInstance", singleInstance);
          let openResult = (yield this.safeInvokeMethod(dart.dynamic, "openDatabase", params));
          if (intL().is(openResult)) {
            return openResult;
          } else if (MapL().is(openResult)) {
            let id = intL().as(openResult[$_get]("id"));
            let recoveredInTransaction = dart.equals(openResult[$_get]("recoveredInTransaction"), true);
            if (recoveredInTransaction) {
              if (!dart.equals(this.readOnly, true)) {
                try {
                  yield this.safeInvokeMethod(dart.dynamic, "execute", (t1$0 = new (IdentityMapOfStringL$dynamic()).from(["sql", "ROLLBACK"]), (() => {
                    t1$0[$addAll](database_mixin.SqfliteDatabaseMixin.getBaseDatabaseMethodArgumentsInTransaction(id, false));
                    return t1$0;
                  })()));
                } catch (e$) {
                  let e = dart.getThrown(e$);
                  core.print("ignore recovered database ROLLBACK error " + dart.str(e));
                }
              }
            }
            return id;
          } else {
            if (openResult != null) {
              dart.throw("unsupported result " + dart.str(openResult) + " (" + dart.str((t2 = openResult, t2 == null ? null : dart.runtimeType(t2))));
            }
            return null;
          }
        }).bind(this));
      }
      [_closeDatabase](databaseId) {
        return async.async(dart.void, (function* _closeDatabase() {
          yield this[_closeLock].synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
            if (!dart.test(this.isClosed)) {
              this.isClosed = true;
              if (!dart.equals(this.readOnly, true) && dart.test(this.inTransaction)) {
                try {
                  yield this.txnWriteSynchronized(core.Null, this.txn, dart.fn(txn => async.async(core.Null, (function*() {
                    try {
                      yield this.invokeExecute(dart.dynamic, "ROLLBACK", null, {inTransactionChange: false});
                    } catch (e) {
                      let _ = dart.getThrown(e);
                    }
                  }).bind(this)), TransactionLToFutureLOfNull()));
                } catch (e$) {
                  let _ = dart.getThrown(e$);
                }
              }
              try {
                yield this.safeInvokeMethod(dart.dynamic, "closeDatabase", new (IdentityMapOfStringL$dynamic()).from(["id", databaseId]));
              } catch (e$0) {
                let e = dart.getThrown(e$0);
                core.print("error " + dart.str(e) + " closing database " + dart.str(databaseId));
              }
            }
          }).bind(this)), VoidToFutureLOfNull()));
        }).bind(this));
      }
      doOpen(options) {
        return async.async(SqfliteDatabaseL(), (function* doOpen() {
          let t6, t6$;
          if (options.version != null) {
            if (options.version === 0) {
              dart.throw(new core.ArgumentError.new("version cannot be set to 0 in openDatabase"));
            }
          } else {
            if (options.onCreate != null) {
              dart.throw(new core.ArgumentError.new("onCreate must be null if no version is specified"));
            }
            if (options.onUpgrade != null) {
              dart.throw(new core.ArgumentError.new("onUpgrade must be null if no version is specified"));
            }
            if (options.onDowngrade != null) {
              dart.throw(new core.ArgumentError.new("onDowngrade must be null if no version is specified"));
            }
          }
          this.options = options;
          let databaseId = (yield this.openDatabase());
          try {
            if (dart.equals(options.onDowngrade, sqlite_api.onDatabaseDowngradeDelete)) {
              const _onDatabaseDowngradeDelete = (_db, oldVersion, newVersion) => {
                return async.async(dart.void, (function* _onDatabaseDowngradeDelete() {
                  let t6, t5, t8, t7, t6$;
                  let db = SqfliteDatabaseL().as(_db);
                  yield db.doClose();
                  this.isClosed = false;
                  yield this.factory.deleteDatabase(db.path);
                  db.id = databaseId = (yield this.openDatabase());
                  try {
                    if (options.onConfigure != null) {
                      yield (t5 = options, t6 = db, t5.onConfigure(t6));
                    }
                  } catch (e$) {
                    let e = dart.getThrown(e$);
                    core.print(e);
                    yield db.beginTransaction({exclusive: true});
                    dart.rethrow(e$);
                  }
                  yield db.beginTransaction({exclusive: true});
                  if (options.onCreate != null) {
                    yield (t6$ = options, t7 = db, t8 = options.version, t6$.onCreate(t7, t8));
                  }
                }).bind(this));
              };
              dart.fn(_onDatabaseDowngradeDelete, DatabaseLAndintLAndintLToFutureLOfvoid());
              options.onDowngrade = _onDatabaseDowngradeDelete;
            }
            this.id = databaseId;
            this.openTransaction = new transaction.SqfliteTransaction.new(this);
            if (options.onConfigure != null) {
              yield (t6 = options, t6.onConfigure(this));
            }
            if (options.version != null) {
              let oldVersion = (yield this.getVersion());
              if (oldVersion != options.version) {
                yield this.transaction(core.Null, dart.fn(txn => async.async(core.Null, (function*() {
                  let t7, t6, t8, t7$, t6$, t8$, t7$0, t6$0, t8$0, t7$1, t6$1;
                  let sqfliteTransaction = SqfliteTransactionL().as(txn);
                  this.openTransaction = sqfliteTransaction;
                  let oldVersion = (yield this.getVersion());
                  if (oldVersion == null || oldVersion === 0) {
                    if (options.onCreate != null) {
                      yield (t6 = options, t7 = options.version, t6.onCreate(this, t7));
                    } else if (options.onUpgrade != null) {
                      yield (t6$ = options, t7$ = 0, t8 = options.version, t6$.onUpgrade(this, t7$, t8));
                    }
                  } else if (dart.notNull(options.version) > dart.notNull(oldVersion)) {
                    if (options.onUpgrade != null) {
                      yield (t6$0 = options, t7$0 = oldVersion, t8$ = options.version, t6$0.onUpgrade(this, t7$0, t8$));
                    }
                  } else if (dart.notNull(options.version) < dart.notNull(oldVersion)) {
                    if (options.onDowngrade != null) {
                      yield (t6$1 = options, t7$1 = oldVersion, t8$0 = options.version, t6$1.onDowngrade(this, t7$1, t8$0));
                    }
                  }
                  if (oldVersion != options.version) {
                    yield this.setVersion(options.version);
                  }
                }).bind(this)), TransactionLToFutureLOfNull()), {exclusive: true});
              }
            }
            if (options.onOpen != null) {
              yield (t6$ = options, t6$.onOpen(this));
            }
            return this;
          } catch (e$) {
            let e = dart.getThrown(e$);
            core.print("error " + dart.str(e) + " during open, closing...");
            yield this[_closeDatabase](databaseId);
            dart.rethrow(e$);
          } finally {
            this.openTransaction = null;
          }
        }).bind(this));
      }
    }
    dart.defineExtensionMethods(SqfliteDatabaseMixin, ['toString']);
    return SqfliteDatabaseMixin;
  };
  (database_mixin.SqfliteDatabaseMixin[dart.mixinNew] = function() {
    this[openHelper] = null;
    this[options] = null;
    this[isClosed] = false;
    this[path] = null;
    this[transactionRefCount] = 0;
    this[openTransaction] = null;
    this[rawLock] = synchronized.Lock.new();
    this[id] = null;
    this[inTransaction] = false;
    this[_closeLock] = synchronized.Lock.new();
  }).prototype = database_mixin.SqfliteDatabaseMixin.prototype;
  dart.addTypeTests(database_mixin.SqfliteDatabaseMixin);
  dart.addTypeCaches(database_mixin.SqfliteDatabaseMixin);
  database_mixin.SqfliteDatabaseMixin[dart.implements] = () => [database.SqfliteDatabase, core.Object];
  dart.setMethodSignature(database_mixin.SqfliteDatabaseMixin, () => ({
    __proto__: dart.getMethods(database_mixin.SqfliteDatabaseMixin.__proto__),
    safeInvokeMethod: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(core.String)], [dart.dynamic]]),
    batch: dart.fnType(dart.legacy(sqlite_api.Batch), []),
    checkNotClosed: dart.fnType(dart.void, []),
    invokeMethod: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(core.String)], [dart.dynamic]]),
    devInvokeMethod: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(core.String)], [dart.dynamic]]),
    devInvokeSqlMethod: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(core.String), dart.legacy(core.String)], [dart.legacy(core.List)]]),
    txnSynchronized: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(sqlite_api.Transaction), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(sqlite_api.Transaction)]))]]),
    txnWriteSynchronized: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(sqlite_api.Transaction), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(sqlite_api.Transaction)]))]]),
    txnExecute: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(transaction.SqfliteTransaction), dart.legacy(core.String)], [dart.legacy(core.List)]]),
    invokeExecute: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(core.String), dart.legacy(core.List)], {inTransactionChange: dart.legacy(core.bool)}, {}]),
    txnRawInsert: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(transaction.SqfliteTransaction), dart.legacy(core.String), dart.legacy(core.List)]),
    txnRawQuery: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))))), [dart.legacy(transaction.SqfliteTransaction), dart.legacy(core.String), dart.legacy(core.List)]),
    txnRawUpdate: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(transaction.SqfliteTransaction), dart.legacy(core.String), dart.legacy(core.List)]),
    txnApplyBatch: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [dart.legacy(transaction.SqfliteTransaction), dart.legacy(batch.SqfliteBatch)], {continueOnError: dart.legacy(core.bool), noResult: dart.legacy(core.bool)}, {}),
    beginTransaction: dart.fnType(dart.legacy(async.Future$(dart.legacy(transaction.SqfliteTransaction))), [], {exclusive: dart.legacy(core.bool)}, {}),
    endTransaction: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(transaction.SqfliteTransaction)]),
    [_runTransaction]: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(sqlite_api.Transaction), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(sqlite_api.Transaction)]))], {exclusive: dart.legacy(core.bool)}, {}]),
    transaction: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(sqlite_api.Transaction)]))], {exclusive: dart.legacy(core.bool)}, {}]),
    getVersion: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    setVersion: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)]),
    close: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    doClose: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    openDatabase: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    [_closeDatabase]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)]),
    doOpen: dart.fnType(dart.legacy(async.Future$(dart.legacy(database.SqfliteDatabase))), [dart.legacy(sqlite_api.OpenDatabaseOptions)])
  }));
  dart.setGetterSignature(database_mixin.SqfliteDatabaseMixin, () => ({
    __proto__: dart.getGetters(database_mixin.SqfliteDatabaseMixin.__proto__),
    factory: dart.legacy(factory$.SqfliteDatabaseFactory),
    readOnly: dart.legacy(core.bool),
    db: dart.legacy(database.SqfliteDatabase),
    isOpen: dart.legacy(core.bool),
    txn: dart.legacy(transaction.SqfliteTransaction),
    baseDatabaseMethodArguments: dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))
  }));
  dart.setLibraryUri(database_mixin.SqfliteDatabaseMixin, L4);
  dart.setFieldSignature(database_mixin.SqfliteDatabaseMixin, () => ({
    __proto__: dart.getFields(database_mixin.SqfliteDatabaseMixin.__proto__),
    openHelper: dart.fieldType(dart.legacy(database.SqfliteDatabaseOpenHelper)),
    options: dart.fieldType(dart.legacy(sqlite_api.OpenDatabaseOptions)),
    isClosed: dart.fieldType(dart.legacy(core.bool)),
    path: dart.fieldType(dart.legacy(core.String)),
    transactionRefCount: dart.fieldType(dart.legacy(core.int)),
    openTransaction: dart.fieldType(dart.legacy(transaction.SqfliteTransaction)),
    rawLock: dart.finalFieldType(dart.legacy(synchronized.Lock)),
    id: dart.fieldType(dart.legacy(core.int)),
    inTransaction: dart.fieldType(dart.legacy(core.bool)),
    [_closeLock]: dart.finalFieldType(dart.legacy(synchronized.Lock))
  }));
  var _rawQuery = dart.privateName(database_mixin, "_rawQuery");
  var _rawUpdate = dart.privateName(database_mixin, "_rawUpdate");
  var _rawDelete = dart.privateName(database_mixin, "_rawDelete");
  database_mixin.SqfliteDatabaseExecutorMixin = class SqfliteDatabaseExecutorMixin extends core.Object {};
  database_mixin.SqfliteDatabaseExecutorMixin[dart.mixinOn] = Object => class SqfliteDatabaseExecutorMixin extends Object {
    execute(sql, $arguments = null) {
      this.db.checkNotClosed();
      return this.db.txnExecute(dart.dynamic, this.txn, sql, $arguments);
    }
    rawInsert(sql, $arguments = null) {
      this.db.checkNotClosed();
      return this.db.txnRawInsert(this.txn, sql, $arguments);
    }
    insert(table, values, opts) {
      let nullColumnHack = opts && 'nullColumnHack' in opts ? opts.nullColumnHack : null;
      let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
      let builder = new sql_builder.SqlBuilder.insert(table, values, {nullColumnHack: nullColumnHack, conflictAlgorithm: conflictAlgorithm});
      return this.rawInsert(builder.sql, builder.arguments);
    }
    query(table, opts) {
      let distinct = opts && 'distinct' in opts ? opts.distinct : null;
      let columns = opts && 'columns' in opts ? opts.columns : null;
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let groupBy = opts && 'groupBy' in opts ? opts.groupBy : null;
      let having = opts && 'having' in opts ? opts.having : null;
      let orderBy = opts && 'orderBy' in opts ? opts.orderBy : null;
      let limit = opts && 'limit' in opts ? opts.limit : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let builder = new sql_builder.SqlBuilder.query(table, {distinct: distinct, columns: columns, where: where, groupBy: groupBy, having: having, orderBy: orderBy, limit: limit, offset: offset, whereArgs: whereArgs});
      return this[_rawQuery](builder.sql, builder.arguments);
    }
    rawQuery(sql, $arguments = null) {
      value_utils.checkRawArgs($arguments);
      return this[_rawQuery](sql, $arguments);
    }
    [_rawQuery](sql, $arguments = null) {
      this.db.checkNotClosed();
      return this.db.txnRawQuery(this.txn, sql, $arguments);
    }
    rawUpdate(sql, $arguments = null) {
      value_utils.checkRawArgs($arguments);
      return this[_rawUpdate](sql, $arguments);
    }
    [_rawUpdate](sql, $arguments = null) {
      this.db.checkNotClosed();
      return this.db.txnRawUpdate(this.txn, sql, $arguments);
    }
    update(table, values, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
      let builder = new sql_builder.SqlBuilder.update(table, values, {where: where, whereArgs: whereArgs, conflictAlgorithm: conflictAlgorithm});
      return this.rawUpdate(builder.sql, builder.arguments);
    }
    rawDelete(sql, $arguments = null) {
      value_utils.checkRawArgs($arguments);
      return this[_rawDelete](sql, $arguments);
    }
    [_rawDelete](sql, $arguments = null) {
      return this.rawUpdate(sql, $arguments);
    }
    delete(table, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let builder = new sql_builder.SqlBuilder.delete(table, {where: where, whereArgs: whereArgs});
      return this[_rawDelete](builder.sql, builder.arguments);
    }
  };
  (database_mixin.SqfliteDatabaseExecutorMixin[dart.mixinNew] = function() {
  }).prototype = database_mixin.SqfliteDatabaseExecutorMixin.prototype;
  dart.addTypeTests(database_mixin.SqfliteDatabaseExecutorMixin);
  dart.addTypeCaches(database_mixin.SqfliteDatabaseExecutorMixin);
  database_mixin.SqfliteDatabaseExecutorMixin[dart.implements] = () => [database.SqfliteDatabaseExecutor, core.Object];
  dart.setMethodSignature(database_mixin.SqfliteDatabaseExecutorMixin, () => ({
    __proto__: dart.getMethods(database_mixin.SqfliteDatabaseExecutorMixin.__proto__),
    execute: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)], [dart.legacy(core.List)]),
    rawInsert: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.String)], [dart.legacy(core.List)]),
    insert: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], {conflictAlgorithm: dart.legacy(sql_builder.ConflictAlgorithm), nullColumnHack: dart.legacy(core.String)}, {}),
    query: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))))), [dart.legacy(core.String)], {columns: dart.legacy(core.List$(dart.legacy(core.String))), distinct: dart.legacy(core.bool), groupBy: dart.legacy(core.String), having: dart.legacy(core.String), limit: dart.legacy(core.int), offset: dart.legacy(core.int), orderBy: dart.legacy(core.String), where: dart.legacy(core.String), whereArgs: dart.legacy(core.List)}, {}),
    rawQuery: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))))), [dart.legacy(core.String)], [dart.legacy(core.List)]),
    [_rawQuery]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))))), [dart.legacy(core.String)], [dart.legacy(core.List)]),
    rawUpdate: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.String)], [dart.legacy(core.List)]),
    [_rawUpdate]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.String)], [dart.legacy(core.List)]),
    update: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], {conflictAlgorithm: dart.legacy(sql_builder.ConflictAlgorithm), where: dart.legacy(core.String), whereArgs: dart.legacy(core.List)}, {}),
    rawDelete: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.String)], [dart.legacy(core.List)]),
    [_rawDelete]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.String)], [dart.legacy(core.List)]),
    delete: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.String)], {where: dart.legacy(core.String), whereArgs: dart.legacy(core.List)}, {})
  }));
  dart.setLibraryUri(database_mixin.SqfliteDatabaseExecutorMixin, L4);
  const Object_SqfliteDatabaseMixin$36 = class Object_SqfliteDatabaseMixin extends core.Object {};
  (Object_SqfliteDatabaseMixin$36.new = function() {
    database_mixin.SqfliteDatabaseMixin[dart.mixinNew].call(this);
  }).prototype = Object_SqfliteDatabaseMixin$36.prototype;
  dart.applyMixin(Object_SqfliteDatabaseMixin$36, database_mixin.SqfliteDatabaseMixin);
  const Object_SqfliteDatabaseExecutorMixin$36 = class Object_SqfliteDatabaseExecutorMixin extends Object_SqfliteDatabaseMixin$36 {};
  (Object_SqfliteDatabaseExecutorMixin$36.new = function() {
    Object_SqfliteDatabaseExecutorMixin$36.__proto__.new.call(this);
  }).prototype = Object_SqfliteDatabaseExecutorMixin$36.prototype;
  dart.applyMixin(Object_SqfliteDatabaseExecutorMixin$36, database_mixin.SqfliteDatabaseExecutorMixin);
  database_mixin.SqfliteDatabaseBase = class SqfliteDatabaseBase extends Object_SqfliteDatabaseExecutorMixin$36 {};
  (database_mixin.SqfliteDatabaseBase.new = function(openHelper, path, opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    database_mixin.SqfliteDatabaseBase.__proto__.new.call(this);
    this.openHelper = openHelper;
    this.path = path;
  }).prototype = database_mixin.SqfliteDatabaseBase.prototype;
  dart.addTypeTests(database_mixin.SqfliteDatabaseBase);
  dart.addTypeCaches(database_mixin.SqfliteDatabaseBase);
  dart.setLibraryUri(database_mixin.SqfliteDatabaseBase, L4);
  var database$ = dart.privateName(transaction, "SqfliteTransaction.database");
  var successful = dart.privateName(transaction, "SqfliteTransaction.successful");
  const Object_SqfliteDatabaseExecutorMixin$36$ = class Object_SqfliteDatabaseExecutorMixin extends core.Object {};
  (Object_SqfliteDatabaseExecutorMixin$36$.new = function() {
  }).prototype = Object_SqfliteDatabaseExecutorMixin$36$.prototype;
  dart.applyMixin(Object_SqfliteDatabaseExecutorMixin$36$, database_mixin.SqfliteDatabaseExecutorMixin);
  transaction.SqfliteTransaction = class SqfliteTransaction extends Object_SqfliteDatabaseExecutorMixin$36$ {
    get database() {
      return this[database$];
    }
    set database(value) {
      super.database = value;
    }
    get successful() {
      return this[successful];
    }
    set successful(value) {
      this[successful] = value;
    }
    get db() {
      return this.database;
    }
    get txn() {
      return this;
    }
    batch() {
      return new batch.SqfliteTransactionBatch.new(this);
    }
  };
  (transaction.SqfliteTransaction.new = function(database) {
    this[successful] = null;
    this[database$] = database;
    ;
  }).prototype = transaction.SqfliteTransaction.prototype;
  dart.addTypeTests(transaction.SqfliteTransaction);
  dart.addTypeCaches(transaction.SqfliteTransaction);
  transaction.SqfliteTransaction[dart.implements] = () => [sqlite_api.Transaction];
  dart.setMethodSignature(transaction.SqfliteTransaction, () => ({
    __proto__: dart.getMethods(transaction.SqfliteTransaction.__proto__),
    batch: dart.fnType(dart.legacy(sqlite_api.Batch), [])
  }));
  dart.setGetterSignature(transaction.SqfliteTransaction, () => ({
    __proto__: dart.getGetters(transaction.SqfliteTransaction.__proto__),
    db: dart.legacy(database.SqfliteDatabase),
    txn: dart.legacy(transaction.SqfliteTransaction)
  }));
  dart.setLibraryUri(transaction.SqfliteTransaction, L5);
  dart.setFieldSignature(transaction.SqfliteTransaction, () => ({
    __proto__: dart.getFields(transaction.SqfliteTransaction.__proto__),
    database: dart.finalFieldType(dart.legacy(database.SqfliteDatabase)),
    successful: dart.fieldType(dart.legacy(core.bool))
  }));
  var _getOperationMap = dart.privateName(batch, "_getOperationMap");
  var _add = dart.privateName(batch, "_add");
  var _addExecute = dart.privateName(batch, "_addExecute");
  var operations = dart.privateName(batch, "SqfliteBatch.operations");
  batch.SqfliteBatch = class SqfliteBatch extends core.Object {
    get operations() {
      return this[operations];
    }
    set operations(value) {
      super.operations = value;
    }
    [_getOperationMap](method, sql, $arguments) {
      return new (IdentityMapOfStringL$dynamic()).from(["method", method, "sql", sql, "arguments", $arguments]);
    }
    [_add](method, sql, $arguments) {
      this.operations[$add](this[_getOperationMap](method, sql, $arguments));
    }
    [_addExecute](method, sql, $arguments, inTransaction) {
      let map = this[_getOperationMap](method, sql, $arguments);
      if (inTransaction != null) {
        map[$_set]("inTransaction", inTransaction);
      }
      this.operations[$add](map);
    }
    rawInsert(sql, $arguments = null) {
      this[_add]("insert", sql, $arguments);
    }
    insert(table, values, opts) {
      let nullColumnHack = opts && 'nullColumnHack' in opts ? opts.nullColumnHack : null;
      let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
      let builder = new sql_builder.SqlBuilder.insert(table, values, {nullColumnHack: nullColumnHack, conflictAlgorithm: conflictAlgorithm});
      return this.rawInsert(builder.sql, builder.arguments);
    }
    rawQuery(sql, $arguments = null) {
      this[_add]("query", sql, $arguments);
    }
    query(table, opts) {
      let distinct = opts && 'distinct' in opts ? opts.distinct : null;
      let columns = opts && 'columns' in opts ? opts.columns : null;
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let groupBy = opts && 'groupBy' in opts ? opts.groupBy : null;
      let having = opts && 'having' in opts ? opts.having : null;
      let orderBy = opts && 'orderBy' in opts ? opts.orderBy : null;
      let limit = opts && 'limit' in opts ? opts.limit : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let builder = new sql_builder.SqlBuilder.query(table, {distinct: distinct, columns: columns, where: where, whereArgs: whereArgs, groupBy: groupBy, having: having, orderBy: orderBy, limit: limit, offset: offset});
      return this.rawQuery(builder.sql, builder.arguments);
    }
    rawUpdate(sql, $arguments = null) {
      this[_add]("update", sql, $arguments);
    }
    update(table, values, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let conflictAlgorithm = opts && 'conflictAlgorithm' in opts ? opts.conflictAlgorithm : null;
      let builder = new sql_builder.SqlBuilder.update(table, values, {where: where, whereArgs: whereArgs, conflictAlgorithm: conflictAlgorithm});
      return this.rawUpdate(builder.sql, builder.arguments);
    }
    delete(table, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      let whereArgs = opts && 'whereArgs' in opts ? opts.whereArgs : null;
      let builder = new sql_builder.SqlBuilder.delete(table, {where: where, whereArgs: whereArgs});
      return this.rawDelete(builder.sql, builder.arguments);
    }
    rawDelete(sql, $arguments = null) {
      this.rawUpdate(sql, $arguments);
    }
    execute(sql, $arguments = null) {
      let inTransaction = utils.getSqlInTransactionArgument(sql);
      this[_addExecute]("execute", sql, $arguments, inTransaction);
    }
  };
  (batch.SqfliteBatch.new = function() {
    this[operations] = JSArrayOfMapLOfStringL$dynamic().of([]);
    ;
  }).prototype = batch.SqfliteBatch.prototype;
  dart.addTypeTests(batch.SqfliteBatch);
  dart.addTypeCaches(batch.SqfliteBatch);
  batch.SqfliteBatch[dart.implements] = () => [sqlite_api.Batch];
  dart.setMethodSignature(batch.SqfliteBatch, () => ({
    __proto__: dart.getMethods(batch.SqfliteBatch.__proto__),
    [_getOperationMap]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.List)]),
    [_add]: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.List)]),
    [_addExecute]: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.List), dart.legacy(core.bool)]),
    rawInsert: dart.fnType(dart.void, [dart.legacy(core.String)], [dart.legacy(core.List)]),
    insert: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], {conflictAlgorithm: dart.legacy(sql_builder.ConflictAlgorithm), nullColumnHack: dart.legacy(core.String)}, {}),
    rawQuery: dart.fnType(dart.void, [dart.legacy(core.String)], [dart.legacy(core.List)]),
    query: dart.fnType(dart.void, [dart.legacy(core.String)], {columns: dart.legacy(core.List$(dart.legacy(core.String))), distinct: dart.legacy(core.bool), groupBy: dart.legacy(core.String), having: dart.legacy(core.String), limit: dart.legacy(core.int), offset: dart.legacy(core.int), orderBy: dart.legacy(core.String), where: dart.legacy(core.String), whereArgs: dart.legacy(core.List)}, {}),
    rawUpdate: dart.fnType(dart.void, [dart.legacy(core.String)], [dart.legacy(core.List)]),
    update: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))], {conflictAlgorithm: dart.legacy(sql_builder.ConflictAlgorithm), where: dart.legacy(core.String), whereArgs: dart.legacy(core.List)}, {}),
    delete: dart.fnType(dart.void, [dart.legacy(core.String)], {where: dart.legacy(core.String), whereArgs: dart.legacy(core.List)}, {}),
    rawDelete: dart.fnType(dart.void, [dart.legacy(core.String)], [dart.legacy(core.List)]),
    execute: dart.fnType(dart.void, [dart.legacy(core.String)], [dart.legacy(core.List)])
  }));
  dart.setLibraryUri(batch.SqfliteBatch, L6);
  dart.setFieldSignature(batch.SqfliteBatch, () => ({
    __proto__: dart.getFields(batch.SqfliteBatch.__proto__),
    operations: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))))
  }));
  var database$0 = dart.privateName(batch, "SqfliteDatabaseBatch.database");
  batch.SqfliteDatabaseBatch = class SqfliteDatabaseBatch extends batch.SqfliteBatch {
    get database() {
      return this[database$0];
    }
    set database(value) {
      super.database = value;
    }
    commit(opts) {
      let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
      let noResult = opts && 'noResult' in opts ? opts.noResult : null;
      let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
      this.database.checkNotClosed();
      return this.database.transaction(ListL(), dart.fn(txn => {
        let sqfliteTransaction = SqfliteTransactionL().as(txn);
        return this.database.txnApplyBatch(sqfliteTransaction, this, {noResult: noResult, continueOnError: continueOnError});
      }, TransactionLToFutureLOfListL()), {exclusive: exclusive});
    }
  };
  (batch.SqfliteDatabaseBatch.new = function(database) {
    this[database$0] = database;
    batch.SqfliteDatabaseBatch.__proto__.new.call(this);
    ;
  }).prototype = batch.SqfliteDatabaseBatch.prototype;
  dart.addTypeTests(batch.SqfliteDatabaseBatch);
  dart.addTypeCaches(batch.SqfliteDatabaseBatch);
  dart.setMethodSignature(batch.SqfliteDatabaseBatch, () => ({
    __proto__: dart.getMethods(batch.SqfliteDatabaseBatch.__proto__),
    commit: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [], {continueOnError: dart.legacy(core.bool), exclusive: dart.legacy(core.bool), noResult: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(batch.SqfliteDatabaseBatch, L6);
  dart.setFieldSignature(batch.SqfliteDatabaseBatch, () => ({
    __proto__: dart.getFields(batch.SqfliteDatabaseBatch.__proto__),
    database: dart.finalFieldType(dart.legacy(database.SqfliteDatabase))
  }));
  var transaction$ = dart.privateName(batch, "SqfliteTransactionBatch.transaction");
  batch.SqfliteTransactionBatch = class SqfliteTransactionBatch extends batch.SqfliteBatch {
    get transaction() {
      return this[transaction$];
    }
    set transaction(value) {
      super.transaction = value;
    }
    commit(opts) {
      let exclusive = opts && 'exclusive' in opts ? opts.exclusive : null;
      let noResult = opts && 'noResult' in opts ? opts.noResult : null;
      let continueOnError = opts && 'continueOnError' in opts ? opts.continueOnError : null;
      if (exclusive != null) {
        dart.throw(new core.ArgumentError.value(exclusive, "exclusive", "must not be set when commiting a batch in a transaction"));
      }
      return this.transaction.database.txnApplyBatch(this.transaction, this, {noResult: noResult, continueOnError: continueOnError});
    }
  };
  (batch.SqfliteTransactionBatch.new = function(transaction) {
    this[transaction$] = transaction;
    batch.SqfliteTransactionBatch.__proto__.new.call(this);
    ;
  }).prototype = batch.SqfliteTransactionBatch.prototype;
  dart.addTypeTests(batch.SqfliteTransactionBatch);
  dart.addTypeCaches(batch.SqfliteTransactionBatch);
  dart.setMethodSignature(batch.SqfliteTransactionBatch, () => ({
    __proto__: dart.getMethods(batch.SqfliteTransactionBatch.__proto__),
    commit: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [], {continueOnError: dart.legacy(core.bool), exclusive: dart.legacy(core.bool), noResult: dart.legacy(core.bool)}, {})
  }));
  dart.setLibraryUri(batch.SqfliteTransactionBatch, L6);
  dart.setFieldSignature(batch.SqfliteTransactionBatch, () => ({
    __proto__: dart.getFields(batch.SqfliteTransactionBatch.__proto__),
    transaction: dart.finalFieldType(dart.legacy(transaction.SqfliteTransaction))
  }));
  database.SqfliteDatabaseExecutor = class SqfliteDatabaseExecutor extends core.Object {};
  (database.SqfliteDatabaseExecutor.new = function() {
    ;
  }).prototype = database.SqfliteDatabaseExecutor.prototype;
  dart.addTypeTests(database.SqfliteDatabaseExecutor);
  dart.addTypeCaches(database.SqfliteDatabaseExecutor);
  database.SqfliteDatabaseExecutor[dart.implements] = () => [sqlite_api.DatabaseExecutor];
  dart.setLibraryUri(database.SqfliteDatabaseExecutor, L7);
  var factory$0 = dart.privateName(database, "SqfliteDatabaseOpenHelper.factory");
  var options$ = dart.privateName(database, "SqfliteDatabaseOpenHelper.options");
  var path$0 = dart.privateName(database, "SqfliteDatabaseOpenHelper.path");
  var sqfliteDatabase = dart.privateName(database, "SqfliteDatabaseOpenHelper.sqfliteDatabase");
  database.SqfliteDatabaseOpenHelper = class SqfliteDatabaseOpenHelper extends core.Object {
    get factory() {
      return this[factory$0];
    }
    set factory(value) {
      super.factory = value;
    }
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get sqfliteDatabase() {
      return this[sqfliteDatabase];
    }
    set sqfliteDatabase(value) {
      this[sqfliteDatabase] = value;
    }
    newDatabase(path) {
      return this.factory.newDatabase(this, path);
    }
    get isOpen() {
      return this.sqfliteDatabase != null;
    }
    openDatabase() {
      return async.async(SqfliteDatabaseL(), (function* openDatabase() {
        if (!dart.test(this.isOpen)) {
          let database = this.newDatabase(this.path);
          yield database.doOpen(this.options);
          this.sqfliteDatabase = database;
        }
        return this.sqfliteDatabase;
      }).bind(this));
    }
    closeDatabase(sqfliteDatabase) {
      return async.async(dart.void, (function* closeDatabase() {
        if (!dart.test(this.isOpen)) {
          return;
        }
        yield sqfliteDatabase.doClose();
        this.sqfliteDatabase = null;
      }).bind(this));
    }
  };
  (database.SqfliteDatabaseOpenHelper.new = function(factory, path, options) {
    this[sqfliteDatabase] = null;
    this[factory$0] = factory;
    this[path$0] = path;
    this[options$] = options;
    ;
  }).prototype = database.SqfliteDatabaseOpenHelper.prototype;
  dart.addTypeTests(database.SqfliteDatabaseOpenHelper);
  dart.addTypeCaches(database.SqfliteDatabaseOpenHelper);
  dart.setMethodSignature(database.SqfliteDatabaseOpenHelper, () => ({
    __proto__: dart.getMethods(database.SqfliteDatabaseOpenHelper.__proto__),
    newDatabase: dart.fnType(dart.legacy(database.SqfliteDatabase), [dart.legacy(core.String)]),
    openDatabase: dart.fnType(dart.legacy(async.Future$(dart.legacy(database.SqfliteDatabase))), []),
    closeDatabase: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(database.SqfliteDatabase)])
  }));
  dart.setGetterSignature(database.SqfliteDatabaseOpenHelper, () => ({
    __proto__: dart.getGetters(database.SqfliteDatabaseOpenHelper.__proto__),
    isOpen: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(database.SqfliteDatabaseOpenHelper, L7);
  dart.setFieldSignature(database.SqfliteDatabaseOpenHelper, () => ({
    __proto__: dart.getFields(database.SqfliteDatabaseOpenHelper.__proto__),
    factory: dart.finalFieldType(dart.legacy(factory$.SqfliteDatabaseFactory)),
    options: dart.finalFieldType(dart.legacy(sqlite_api.OpenDatabaseOptions)),
    path: dart.finalFieldType(dart.legacy(core.String)),
    sqfliteDatabase: dart.fieldType(dart.legacy(database.SqfliteDatabase))
  }));
  var id$ = dart.privateName(database, "SqfliteDatabase.id");
  var options$0 = dart.privateName(database, "SqfliteDatabase.options");
  database.SqfliteDatabase = class SqfliteDatabase extends database.SqfliteDatabaseExecutor {
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get options() {
      return this[options$0];
    }
    set options(value) {
      this[options$0] = value;
    }
  };
  (database.SqfliteDatabase.new = function() {
    this[id$] = null;
    this[options$0] = null;
    ;
  }).prototype = database.SqfliteDatabase.prototype;
  dart.addTypeTests(database.SqfliteDatabase);
  dart.addTypeCaches(database.SqfliteDatabase);
  database.SqfliteDatabase[dart.implements] = () => [sqlite_api.Database];
  dart.setLibraryUri(database.SqfliteDatabase, L7);
  dart.setFieldSignature(database.SqfliteDatabase, () => ({
    __proto__: dart.getFields(database.SqfliteDatabase.__proto__),
    id: dart.fieldType(dart.legacy(core.int)),
    options: dart.fieldType(dart.legacy(sqlite_api.OpenDatabaseOptions))
  }));
  const Object_SqfliteDatabaseFactoryMixin$36$ = class Object_SqfliteDatabaseFactoryMixin extends core.Object {};
  (Object_SqfliteDatabaseFactoryMixin$36$.new = function() {
    factory_mixin.SqfliteDatabaseFactoryMixin[dart.mixinNew].call(this);
  }).prototype = Object_SqfliteDatabaseFactoryMixin$36$.prototype;
  dart.applyMixin(Object_SqfliteDatabaseFactoryMixin$36$, factory_mixin.SqfliteDatabaseFactoryMixin);
  factory_mixin.SqfliteDatabaseFactoryBase = class SqfliteDatabaseFactoryBase extends Object_SqfliteDatabaseFactoryMixin$36$ {};
  (factory_mixin.SqfliteDatabaseFactoryBase.new = function() {
    factory_mixin.SqfliteDatabaseFactoryBase.__proto__.new.call(this);
    ;
  }).prototype = factory_mixin.SqfliteDatabaseFactoryBase.prototype;
  dart.addTypeTests(factory_mixin.SqfliteDatabaseFactoryBase);
  dart.addTypeCaches(factory_mixin.SqfliteDatabaseFactoryBase);
  dart.setLibraryUri(factory_mixin.SqfliteDatabaseFactoryBase, L2);
  var path$1 = dart.privateName(factory_mixin, "SqfliteDatabaseDebugInfo.path");
  var singleInstance = dart.privateName(factory_mixin, "SqfliteDatabaseDebugInfo.singleInstance");
  var logLevel = dart.privateName(factory_mixin, "SqfliteDatabaseDebugInfo.logLevel");
  factory_mixin.SqfliteDatabaseDebugInfo = class SqfliteDatabaseDebugInfo extends core.Object {
    get path() {
      return this[path$1];
    }
    set path(value) {
      this[path$1] = value;
    }
    get singleInstance() {
      return this[singleInstance];
    }
    set singleInstance(value) {
      this[singleInstance] = value;
    }
    get logLevel() {
      return this[logLevel];
    }
    set logLevel(value) {
      this[logLevel] = value;
    }
    fromMap(map) {
      let t7;
      this.path = (t7 = map[$_get]("path"), t7 == null ? null : dart.toString(t7));
      this.singleInstance = boolL().as(map[$_get]("singleInstance"));
      this.logLevel = intL().as(map[$_get]("logLevel"));
    }
    toDebugMap() {
      let t7;
      let map = new (IdentityMapOfStringL$dynamic()).from(["path", this.path, "singleInstance", this.singleInstance]);
      if (dart.notNull((t7 = this.logLevel, t7 == null ? constant.sqfliteLogLevelNone : t7)) > dart.notNull(constant.sqfliteLogLevelNone)) {
        map[$_set]("logLevel", this.logLevel);
      }
      return map;
    }
    toString() {
      return dart.toString(this.toDebugMap());
    }
  };
  (factory_mixin.SqfliteDatabaseDebugInfo.new = function() {
    this[path$1] = null;
    this[singleInstance] = null;
    this[logLevel] = null;
    ;
  }).prototype = factory_mixin.SqfliteDatabaseDebugInfo.prototype;
  dart.addTypeTests(factory_mixin.SqfliteDatabaseDebugInfo);
  dart.addTypeCaches(factory_mixin.SqfliteDatabaseDebugInfo);
  dart.setMethodSignature(factory_mixin.SqfliteDatabaseDebugInfo, () => ({
    __proto__: dart.getMethods(factory_mixin.SqfliteDatabaseDebugInfo.__proto__),
    fromMap: dart.fnType(dart.void, [dart.legacy(core.Map)]),
    toDebugMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(factory_mixin.SqfliteDatabaseDebugInfo, L2);
  dart.setFieldSignature(factory_mixin.SqfliteDatabaseDebugInfo, () => ({
    __proto__: dart.getFields(factory_mixin.SqfliteDatabaseDebugInfo.__proto__),
    path: dart.fieldType(dart.legacy(core.String)),
    singleInstance: dart.fieldType(dart.legacy(core.bool)),
    logLevel: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(factory_mixin.SqfliteDatabaseDebugInfo, ['toString']);
  var databases = dart.privateName(factory_mixin, "SqfliteDebugInfo.databases");
  var logLevel$ = dart.privateName(factory_mixin, "SqfliteDebugInfo.logLevel");
  factory_mixin.SqfliteDebugInfo = class SqfliteDebugInfo extends core.Object {
    get databases() {
      return this[databases];
    }
    set databases(value) {
      this[databases] = value;
    }
    get logLevel() {
      return this[logLevel$];
    }
    set logLevel(value) {
      this[logLevel$] = value;
    }
    toDebugMap() {
      let t7;
      let map = new (IdentityMapOfStringL$dynamic()).new();
      if (this.databases != null) {
        map[$_set]("databases", this.databases[$map](StringL(), MapLOfStringL$dynamic(), dart.fn((key, dbInfo) => new (MapEntryOfStringL$MapLOfStringL$dynamic()).__(key, dbInfo.toDebugMap()), StringLAndSqfliteDatabaseDebugInfoLToMapEntryLOfStringL$MapLOfStringL$dynamic())));
      }
      if (dart.notNull((t7 = this.logLevel, t7 == null ? constant.sqfliteLogLevelNone : t7)) > dart.notNull(constant.sqfliteLogLevelNone)) {
        map[$_set]("logLevel", this.logLevel);
      }
      return map;
    }
    toString() {
      return dart.toString(this.toDebugMap());
    }
  };
  (factory_mixin.SqfliteDebugInfo.new = function() {
    this[databases] = null;
    this[logLevel$] = null;
    ;
  }).prototype = factory_mixin.SqfliteDebugInfo.prototype;
  dart.addTypeTests(factory_mixin.SqfliteDebugInfo);
  dart.addTypeCaches(factory_mixin.SqfliteDebugInfo);
  dart.setMethodSignature(factory_mixin.SqfliteDebugInfo, () => ({
    __proto__: dart.getMethods(factory_mixin.SqfliteDebugInfo.__proto__),
    toDebugMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(factory_mixin.SqfliteDebugInfo, L2);
  dart.setFieldSignature(factory_mixin.SqfliteDebugInfo, () => ({
    __proto__: dart.getFields(factory_mixin.SqfliteDebugInfo.__proto__),
    databases: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(factory_mixin.SqfliteDatabaseDebugInfo)))),
    logLevel: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(factory_mixin.SqfliteDebugInfo, ['toString']);
  dart.defineLazy(factory_mixin, {
    /*factory_mixin.paramLogLevel*/get paramLogLevel() {
      return "logLevel";
    },
    /*factory_mixin.paramDatabases*/get paramDatabases() {
      return "databases";
    }
  }, true);
  dart.trackLibraries("packages/sqflite_common/src/mixin/factory.dart", {
    "package:sqflite_common/src/mixin/factory.dart": factory,
    "package:sqflite_common/src/factory.dart": factory$,
    "package:sqflite_common/src/database_mixin.dart": database_mixin,
    "package:sqflite_common/src/transaction.dart": transaction,
    "package:sqflite_common/src/batch.dart": batch,
    "package:sqflite_common/src/database.dart": database,
    "package:sqflite_common/src/factory_mixin.dart": factory_mixin
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["factory.dart","../factory_mixin.dart","../factory.dart","../database_mixin.dart","../transaction.dart","../batch.dart","../database.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/sqflite_common/src/mixin/factory.dart.lib.js"}');
  // Exports:
  return {
    src__mixin__factory: factory,
    src__factory: factory$,
    src__database_mixin: database_mixin,
    src__transaction: transaction,
    src__batch: batch,
    src__database: database,
    src__factory_mixin: factory_mixin
  };
}));

//# sourceMappingURL=factory.dart.lib.js.map
