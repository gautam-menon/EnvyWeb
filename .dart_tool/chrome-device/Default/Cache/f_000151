define(['dart_sdk', 'packages/rxdart/src/subjects/replay_subject.dart', 'packages/flutter_cache_manager/src/result/file_response.dart', 'packages/flutter_cache_manager/src/web/file_service.dart', 'packages/pedantic/pedantic.dart', 'packages/flutter_cache_manager/src/storage/cache_object.dart', 'packages/flutter_cache_manager/src/result/file_info.dart', 'packages/flutter_cache_manager/src/result/download_progress.dart', 'packages/uuid/uuid.dart', 'packages/flutter_cache_manager/src/cache_store.dart', 'packages/flutter_cache_manager/src/compat/file_fetcher.dart', 'packages/clock/src/stopwatch.dart', 'packages/flutter_cache_manager/src/web/mime_converter.dart', 'packages/path_provider/path_provider.dart', 'packages/path/src/path_set.dart', 'packages/file/src/backends/local/local_file_system.dart', 'packages/file/src/interface/link.dart', 'packages/file/src/backends/memory/memory_file_system.dart', 'packages/flutter_cache_manager/src/storage/non_storing_object_provider.dart', 'packages/flutter_cache_manager/src/storage/cache_info_repository.dart'], (function load__packages__flutter_cache_manager__src__web__web_helper_dart(dart_sdk, packages__rxdart__src__subjects__replay_subject$46dart, packages__flutter_cache_manager__src__result__file_response$46dart, packages__flutter_cache_manager__src__web__file_service$46dart, packages__pedantic__pedantic$46dart, packages__flutter_cache_manager__src__storage__cache_object$46dart, packages__flutter_cache_manager__src__result__file_info$46dart, packages__flutter_cache_manager__src__result__download_progress$46dart, packages__uuid__uuid$46dart, packages__flutter_cache_manager__src__cache_store$46dart, packages__flutter_cache_manager__src__compat__file_fetcher$46dart, packages__clock__src__stopwatch$46dart, packages__flutter_cache_manager__src__web__mime_converter$46dart, packages__path_provider__path_provider$46dart, packages__path__src__path_set$46dart, packages__file__src__backends__local__local_file_system$46dart, packages__file__src__interface__link$46dart, packages__file__src__backends__memory__memory_file_system$46dart, packages__flutter_cache_manager__src__storage__non_storing_object_provider$46dart, packages__flutter_cache_manager__src__storage__cache_info_repository$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const _http = dart_sdk._http;
  const io = dart_sdk.io;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const behavior_subject = packages__rxdart__src__subjects__replay_subject$46dart.src__subjects__behavior_subject;
  const file_response = packages__flutter_cache_manager__src__result__file_response$46dart.src__result__file_response;
  const file_service = packages__flutter_cache_manager__src__web__file_service$46dart.src__web__file_service;
  const pedantic = packages__pedantic__pedantic$46dart.pedantic;
  const cache_object = packages__flutter_cache_manager__src__storage__cache_object$46dart.src__storage__cache_object;
  const file_info = packages__flutter_cache_manager__src__result__file_info$46dart.src__result__file_info;
  const download_progress = packages__flutter_cache_manager__src__result__download_progress$46dart.src__result__download_progress;
  const uuid = packages__uuid__uuid$46dart.uuid;
  const cache_store = packages__flutter_cache_manager__src__cache_store$46dart.src__cache_store;
  const file_fetcher = packages__flutter_cache_manager__src__compat__file_fetcher$46dart.src__compat__file_fetcher;
  const $default = packages__clock__src__stopwatch$46dart.src__default;
  const mime_converter = packages__flutter_cache_manager__src__web__mime_converter$46dart.src__web__mime_converter;
  const path_provider = packages__path_provider__path_provider$46dart.path_provider;
  const path = packages__path__src__path_set$46dart.path;
  const local_file_system = packages__file__src__backends__local__local_file_system$46dart.src__backends__local__local_file_system;
  const directory = packages__file__src__interface__link$46dart.src__interface__directory;
  const memory_file_system = packages__file__src__backends__memory__memory_file_system$46dart.src__backends__memory__memory_file_system;
  const non_storing_object_provider = packages__flutter_cache_manager__src__storage__non_storing_object_provider$46dart.src__storage__non_storing_object_provider;
  const cache_info_repository = packages__flutter_cache_manager__src__storage__cache_info_repository$46dart.src__storage__cache_info_repository;
  var web_helper = Object.create(dart.library);
  var file_service_compat = Object.create(dart.library);
  var cache_manager = Object.create(dart.library);
  var flutter_cache_manager = Object.create(dart.library);
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $_get = dartx._get;
  var $addAll = dartx.addAll;
  var $contains = dartx.contains;
  var $endsWith = dartx.endsWith;
  var $length = dartx.length;
  var $split = dartx.split;
  var $trim = dartx.trim;
  var $toLowerCase = dartx.toLowerCase;
  var $startsWith = dartx.startsWith;
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var FileResponseL = () => (FileResponseL = dart.constFn(dart.legacy(file_response.FileResponse)))();
  var BehaviorSubjectOfFileResponseL = () => (BehaviorSubjectOfFileResponseL = dart.constFn(behavior_subject.BehaviorSubject$(FileResponseL())))();
  var BehaviorSubjectLOfFileResponseL = () => (BehaviorSubjectLOfFileResponseL = dart.constFn(dart.legacy(BehaviorSubjectOfFileResponseL())))();
  var IdentityMapOfStringL$BehaviorSubjectLOfFileResponseL = () => (IdentityMapOfStringL$BehaviorSubjectLOfFileResponseL = dart.constFn(_js_helper.IdentityMap$(StringL(), BehaviorSubjectLOfFileResponseL())))();
  var FutureOfNull = () => (FutureOfNull = dart.constFn(async.Future$(core.Null)))();
  var FutureLOfNull = () => (FutureLOfNull = dart.constFn(dart.legacy(FutureOfNull())))();
  var VoidToFutureLOfNull = () => (VoidToFutureLOfNull = dart.constFn(dart.fnType(FutureLOfNull(), [])))();
  var _AsyncStarImplOfFileResponseL = () => (_AsyncStarImplOfFileResponseL = dart.constFn(async._AsyncStarImpl$(FileResponseL())))();
  var IdentityMapOfStringL$StringL = () => (IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(StringL(), StringL())))();
  var voidToNull = () => (voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))();
  var DownloadProgressL = () => (DownloadProgressL = dart.constFn(dart.legacy(download_progress.DownloadProgress)))();
  var _AsyncStarImplOfDownloadProgressL = () => (_AsyncStarImplOfDownloadProgressL = dart.constFn(async._AsyncStarImpl$(DownloadProgressL())))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var StreamControllerOfintL = () => (StreamControllerOfintL = dart.constFn(async.StreamController$(intL())))();
  var ListOfintL = () => (ListOfintL = dart.constFn(core.List$(intL())))();
  var ListLOfintL = () => (ListLOfintL = dart.constFn(dart.legacy(ListOfintL())))();
  var ListLOfintLToListLOfintL = () => (ListLOfintLToListLOfintL = dart.constFn(dart.fnType(ListLOfintL(), [ListLOfintL()])))();
  var FileServiceResponseL = () => (FileServiceResponseL = dart.constFn(dart.legacy(file_service.FileServiceResponse)))();
  var StreamOfListLOfintL = () => (StreamOfListLOfintL = dart.constFn(async.Stream$(ListLOfintL())))();
  var FileL = () => (FileL = dart.constFn(dart.legacy(io.File)))();
  var FileInfoL = () => (FileInfoL = dart.constFn(dart.legacy(file_info.FileInfo)))();
  var FileResponseLToFileInfoL = () => (FileResponseLToFileInfoL = dart.constFn(dart.fnType(FileInfoL(), [FileResponseL()])))();
  var StreamControllerOfFileResponseL = () => (StreamControllerOfFileResponseL = dart.constFn(async.StreamController$(FileResponseL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var FileResponseLToboolL = () => (FileResponseLToboolL = dart.constFn(dart.fnType(boolL(), [FileResponseL()])))();
  var DirectoryL = () => (DirectoryL = dart.constFn(dart.legacy(directory.Directory)))();
  var CacheInfoRepositoryL = () => (CacheInfoRepositoryL = dart.constFn(dart.legacy(cache_info_repository.CacheInfoRepository)))();
  var FutureOfCacheInfoRepositoryL = () => (FutureOfCacheInfoRepositoryL = dart.constFn(async.Future$(CacheInfoRepositoryL())))();
  const CT = Object.create(null);
  var L2 = "file:///C:/Users/HP/Downloads/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_cache_manager-1.4.2/lib/src/cache_manager.dart";
  var L0 = "package:flutter_cache_manager/src/web/web_helper.dart";
  var L1 = "package:flutter_cache_manager/src/compat/file_service_compat.dart";
  var L3 = "package:flutter_cache_manager/src/cache_manager.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.constList([200, 202], intL());
    },
    get C1() {
      return C1 = dart.constList([304], intL());
    },
    get C2() {
      return C2 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 604800000000.0
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 2592000000000.0
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: local_file_system.LocalFileSystem.prototype
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 86400000000.0
      });
    }
  }, false);
  var _store$ = dart.privateName(web_helper, "_store");
  var _memCache = dart.privateName(web_helper, "_memCache");
  var _fileFetcher = dart.privateName(web_helper, "_fileFetcher");
  var _updateFile = dart.privateName(web_helper, "_updateFile");
  var _download = dart.privateName(web_helper, "_download");
  var _manageResponse = dart.privateName(web_helper, "_manageResponse");
  var _setDataFromHeaders = dart.privateName(web_helper, "_setDataFromHeaders");
  var _saveFile = dart.privateName(web_helper, "_saveFile");
  var _removeOldFile = dart.privateName(web_helper, "_removeOldFile");
  var _saveFileAndPostUpdates = dart.privateName(web_helper, "_saveFileAndPostUpdates");
  web_helper.WebHelper = class WebHelper extends core.Object {
    downloadFile(url, opts) {
      let authHeaders = opts && 'authHeaders' in opts ? opts.authHeaders : null;
      let ignoreMemCache = opts && 'ignoreMemCache' in opts ? opts.ignoreMemCache : false;
      if (!dart.test(this[_memCache][$containsKey](url)) || dart.test(ignoreMemCache)) {
        let subject = BehaviorSubjectOfFileResponseL().new();
        this[_memCache][$_set](url, subject);
        pedantic.unawaited(dart.fn(() => async.async(core.Null, (function*() {
          try {
            let iter = async.StreamIterator.new(this[_updateFile](url, {authHeaders: authHeaders}));
            try {
              while (yield iter.moveNext()) {
                let result = iter.current;
                {
                  subject.add(result);
                }
              }
            } finally {
              yield iter.cancel();
            }
          } catch (e$) {
            let e = dart.getThrown(e$);
            let stackTrace = dart.stackTrace(e$);
            subject.addError(e, stackTrace);
          } finally {
            yield subject.close();
            this[_memCache][$remove](url);
          }
        }).bind(this)), VoidToFutureLOfNull())());
      }
      return this[_memCache][$_get](url).stream;
    }
    [_updateFile](url, opts) {
      let authHeaders = opts && 'authHeaders' in opts ? opts.authHeaders : null;
      return new (_AsyncStarImplOfFileResponseL()).new((function* _updateFile(stream) {
        let cacheObject = (yield this[_store$].retrieveCacheData(url));
        cacheObject == null ? cacheObject = new cache_object.CacheObject.new(url) : null;
        let response = (yield this[_download](cacheObject, authHeaders));
        if (stream.addStream(this[_manageResponse](cacheObject, response))) return;
        yield;
        let file = (yield this[_store$].fileDir).childFile(cacheObject.relativePath);
        if (stream.add(new file_info.FileInfo.new(file, file_info.FileSource.Online, cacheObject.validTill, url))) return;
        yield;
      }).bind(this)).stream;
    }
    [_download](cacheObject, authHeaders) {
      let headers = new (IdentityMapOfStringL$StringL()).new();
      if (authHeaders != null) {
        headers[$addAll](authHeaders);
      }
      if (cacheObject.eTag != null) {
        headers[$_set]("if-none-match", cacheObject.eTag);
      }
      return this[_fileFetcher].get(cacheObject.url, {headers: headers});
    }
    [_manageResponse](cacheObject, response) {
      return new (_AsyncStarImplOfDownloadProgressL()).new((function* _manageResponse(stream) {
        let t1;
        let hasNewFile = web_helper.statusCodesNewFile[$contains](response.statusCode);
        let keepOldFile = web_helper.statusCodesFileNotChanged[$contains](response.statusCode);
        if (!dart.test(hasNewFile) && !dart.test(keepOldFile)) {
          dart.throw(new web_helper.HttpExceptionWithStatus.new(response.statusCode, "Invalid statusCode: " + dart.str((t1 = response, t1 == null ? null : t1.statusCode)), {uri: core.Uri.parse(cacheObject.url)}));
        }
        let oldCacheFile = cacheObject.relativePath;
        let newCacheFile = cacheObject.relativePath;
        this[_setDataFromHeaders](cacheObject, response);
        if (dart.test(web_helper.statusCodesNewFile[$contains](response.statusCode))) {
          let iter = async.StreamIterator.new(this[_saveFile](cacheObject, response));
          try {
            while (yield iter.moveNext()) {
              let progress = iter.current;
              {
                if (stream.add(new download_progress.DownloadProgress.new(cacheObject.url, response.contentLength, progress))) return;
                yield;
              }
            }
          } finally {
            yield iter.cancel();
          }
          newCacheFile = cacheObject.relativePath;
        }
        pedantic.unawaited(this[_store$].putFile(cacheObject).then(dart.void, dart.fn(_ => {
          if (newCacheFile != oldCacheFile) {
            this[_removeOldFile](oldCacheFile);
          }
        }, voidToNull())));
      }).bind(this)).stream;
    }
    [_setDataFromHeaders](cacheObject, response) {
      let t1;
      cacheObject.validTill = response.validTill;
      cacheObject.eTag = response.eTag;
      let fileExtension = response.fileExtension;
      let oldPath = cacheObject.relativePath;
      if (oldPath != null && !oldPath[$endsWith](fileExtension)) {
        pedantic.unawaited(this[_removeOldFile](oldPath));
        cacheObject.relativePath = null;
      }
      t1 = cacheObject;
      t1.relativePath == null ? t1.relativePath = dart.str(new uuid.Uuid.new().v1()) + dart.str(fileExtension) : null;
    }
    [_saveFile](cacheObject, response) {
      let receivedBytesResultController = StreamControllerOfintL().new();
      pedantic.unawaited(this[_saveFileAndPostUpdates](receivedBytesResultController, cacheObject, response));
      return receivedBytesResultController.stream;
    }
    [_saveFileAndPostUpdates](receivedBytesResultController, cacheObject, response) {
      return async.async(dart.dynamic, (function* _saveFileAndPostUpdates() {
        let basePath = (yield this[_store$].fileDir);
        let file = basePath.childFile(cacheObject.relativePath);
        let folder = file.parent;
        if (!dart.test(yield folder.exists())) {
          folder.createSync({recursive: true});
        }
        try {
          let receivedBytes = 0;
          let sink = file.openWrite();
          yield response.content.map(ListLOfintL(), dart.fn(s => {
            receivedBytes = receivedBytes + dart.notNull(s[$length]);
            receivedBytesResultController.add(receivedBytes);
            return s;
          }, ListLOfintLToListLOfintL())).pipe(sink);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stacktrace = dart.stackTrace(e$);
          receivedBytesResultController.addError(e, stacktrace);
        }
        yield receivedBytesResultController.close();
      }).bind(this));
    }
    [_removeOldFile](relativePath) {
      return async.async(dart.void, (function* _removeOldFile() {
        if (relativePath == null) return;
        let file = (yield this[_store$].fileDir).childFile(relativePath);
        if (dart.test(yield file.exists())) {
          yield file.delete();
        }
      }).bind(this));
    }
  };
  (web_helper.WebHelper.new = function(_store, fileFetcher) {
    let t0;
    this[_store$] = _store;
    this[_memCache] = new (IdentityMapOfStringL$BehaviorSubjectLOfFileResponseL()).new();
    this[_fileFetcher] = (t0 = fileFetcher, t0 == null ? new file_service.HttpFileService.new() : t0);
    ;
  }).prototype = web_helper.WebHelper.prototype;
  dart.addTypeTests(web_helper.WebHelper);
  dart.addTypeCaches(web_helper.WebHelper);
  dart.setMethodSignature(web_helper.WebHelper, () => ({
    __proto__: dart.getMethods(web_helper.WebHelper.__proto__),
    downloadFile: dart.fnType(dart.legacy(async.Stream$(dart.legacy(file_response.FileResponse))), [dart.legacy(core.String)], {authHeaders: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), ignoreMemCache: dart.legacy(core.bool)}, {}),
    [_updateFile]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(file_response.FileResponse))), [dart.legacy(core.String)], {authHeaders: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))}, {}),
    [_download]: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_service.FileServiceResponse))), [dart.legacy(cache_object.CacheObject), dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))]),
    [_manageResponse]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(download_progress.DownloadProgress))), [dart.legacy(cache_object.CacheObject), dart.legacy(file_service.FileServiceResponse)]),
    [_setDataFromHeaders]: dart.fnType(dart.void, [dart.legacy(cache_object.CacheObject), dart.legacy(file_service.FileServiceResponse)]),
    [_saveFile]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.int))), [dart.legacy(cache_object.CacheObject), dart.legacy(file_service.FileServiceResponse)]),
    [_saveFileAndPostUpdates]: dart.fnType(dart.legacy(async.Future), [dart.legacy(async.StreamController$(dart.legacy(core.int))), dart.legacy(cache_object.CacheObject), dart.legacy(file_service.FileServiceResponse)]),
    [_removeOldFile]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(web_helper.WebHelper, L0);
  dart.setFieldSignature(web_helper.WebHelper, () => ({
    __proto__: dart.getFields(web_helper.WebHelper.__proto__),
    [_store$]: dart.finalFieldType(dart.legacy(cache_store.CacheStore)),
    [_fileFetcher]: dart.finalFieldType(dart.legacy(file_service.FileService)),
    [_memCache]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(file_response.FileResponse))))))
  }));
  var statusCode$ = dart.privateName(web_helper, "HttpExceptionWithStatus.statusCode");
  web_helper.HttpExceptionWithStatus = class HttpExceptionWithStatus extends _http.HttpException {
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
  };
  (web_helper.HttpExceptionWithStatus.new = function(statusCode, message, opts) {
    let uri = opts && 'uri' in opts ? opts.uri : null;
    this[statusCode$] = statusCode;
    web_helper.HttpExceptionWithStatus.__proto__.new.call(this, message, {uri: uri});
    ;
  }).prototype = web_helper.HttpExceptionWithStatus.prototype;
  dart.addTypeTests(web_helper.HttpExceptionWithStatus);
  dart.addTypeCaches(web_helper.HttpExceptionWithStatus);
  dart.setLibraryUri(web_helper.HttpExceptionWithStatus, L0);
  dart.setFieldSignature(web_helper.HttpExceptionWithStatus, () => ({
    __proto__: dart.getFields(web_helper.HttpExceptionWithStatus.__proto__),
    statusCode: dart.finalFieldType(dart.legacy(core.int))
  }));
  var C0;
  var C1;
  dart.defineLazy(web_helper, {
    /*web_helper.statusCodesNewFile*/get statusCodesNewFile() {
      return C0 || CT.C0;
    },
    /*web_helper.statusCodesFileNotChanged*/get statusCodesFileNotChanged() {
      return C1 || CT.C1;
    }
  }, true);
  var fileFetcher$ = dart.privateName(file_service_compat, "FileServiceCompat.fileFetcher");
  file_service_compat.FileServiceCompat = class FileServiceCompat extends core.Object {
    get fileFetcher() {
      return this[fileFetcher$];
    }
    set fileFetcher(value) {
      super.fileFetcher = value;
    }
    get(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(FileServiceResponseL(), (function* get() {
        let t3, t2;
        let legacyResponse = (yield (t2 = url, t3 = headers, this.fileFetcher(t2, {headers: t3})));
        return new file_service_compat.CompatFileServiceGetResponse.new(legacyResponse);
      }).bind(this));
    }
  };
  (file_service_compat.FileServiceCompat.new = function(fileFetcher) {
    this[fileFetcher$] = fileFetcher;
    ;
  }).prototype = file_service_compat.FileServiceCompat.prototype;
  dart.addTypeTests(file_service_compat.FileServiceCompat);
  dart.addTypeCaches(file_service_compat.FileServiceCompat);
  file_service_compat.FileServiceCompat[dart.implements] = () => [file_service.FileService];
  dart.setMethodSignature(file_service_compat.FileServiceCompat, () => ({
    __proto__: dart.getMethods(file_service_compat.FileServiceCompat.__proto__),
    get: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_service.FileServiceResponse))), [dart.legacy(core.String)], {headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))}, {})
  }));
  dart.setLibraryUri(file_service_compat.FileServiceCompat, L1);
  dart.setFieldSignature(file_service_compat.FileServiceCompat, () => ({
    __proto__: dart.getFields(file_service_compat.FileServiceCompat.__proto__),
    fileFetcher: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(file_fetcher.FileFetcherResponse))), [dart.legacy(core.String)], {headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))}, {})))
  }));
  var _receivedTime = dart.privateName(file_service_compat, "_receivedTime");
  var _hasHeader = dart.privateName(file_service_compat, "_hasHeader");
  var _header = dart.privateName(file_service_compat, "_header");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var C2;
  var C3;
  var legacyResponse$ = dart.privateName(file_service_compat, "CompatFileServiceGetResponse.legacyResponse");
  file_service_compat.CompatFileServiceGetResponse = class CompatFileServiceGetResponse extends core.Object {
    get legacyResponse() {
      return this[legacyResponse$];
    }
    set legacyResponse(value) {
      super.legacyResponse = value;
    }
    [_hasHeader](name) {
      return this.legacyResponse.hasHeader(name);
    }
    [_header](name) {
      return this.legacyResponse.header(name);
    }
    get content() {
      return StreamOfListLOfintL().value(this.legacyResponse.bodyBytes);
    }
    get contentLength() {
      return this.legacyResponse.bodyBytes[$length];
    }
    get validTill() {
      let t2;
      let ageDuration = C2 || CT.C2;
      if (dart.test(this[_hasHeader]("cache-control"))) {
        let controlSettings = this[_header]("cache-control")[$split](",");
        for (let setting of controlSettings) {
          let sanitizedSetting = setting[$trim]()[$toLowerCase]();
          if (sanitizedSetting === "no-cache") {
            ageDuration = C3 || CT.C3;
          }
          if (sanitizedSetting[$startsWith]("max-age=")) {
            let validSeconds = (t2 = core.int.tryParse(sanitizedSetting[$split]("=")[$_get](1)), t2 == null ? 0 : t2);
            if (dart.notNull(validSeconds) > 0) {
              ageDuration = new core.Duration.new({seconds: validSeconds});
            }
          }
        }
      }
      return this[_receivedTime].add(ageDuration);
    }
    get eTag() {
      return dart.test(this[_hasHeader]("etag")) ? this[_header]("etag") : null;
    }
    get fileExtension() {
      let t2;
      let fileExtension = "";
      if (dart.test(this[_hasHeader]("content-type"))) {
        let contentType = _http.ContentType.parse(this[_header]("content-type"));
        fileExtension = (t2 = mime_converter['ContentTypeConverter|get#fileExtension'](contentType), t2 == null ? "" : t2);
      }
      return fileExtension;
    }
    get statusCode() {
      return intL().as(this.legacyResponse.statusCode);
    }
  };
  (file_service_compat.CompatFileServiceGetResponse.new = function(legacyResponse) {
    this[_receivedTime] = $default.clock.now();
    this[legacyResponse$] = legacyResponse;
    ;
  }).prototype = file_service_compat.CompatFileServiceGetResponse.prototype;
  dart.addTypeTests(file_service_compat.CompatFileServiceGetResponse);
  dart.addTypeCaches(file_service_compat.CompatFileServiceGetResponse);
  file_service_compat.CompatFileServiceGetResponse[dart.implements] = () => [file_service.FileServiceResponse];
  dart.setMethodSignature(file_service_compat.CompatFileServiceGetResponse, () => ({
    __proto__: dart.getMethods(file_service_compat.CompatFileServiceGetResponse.__proto__),
    [_hasHeader]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    [_header]: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(file_service_compat.CompatFileServiceGetResponse, () => ({
    __proto__: dart.getGetters(file_service_compat.CompatFileServiceGetResponse.__proto__),
    content: dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(core.int))))),
    contentLength: dart.legacy(core.int),
    validTill: dart.legacy(core.DateTime),
    eTag: dart.legacy(core.String),
    fileExtension: dart.legacy(core.String),
    statusCode: dart.legacy(core.int)
  }));
  dart.setLibraryUri(file_service_compat.CompatFileServiceGetResponse, L1);
  dart.setFieldSignature(file_service_compat.CompatFileServiceGetResponse, () => ({
    __proto__: dart.getFields(file_service_compat.CompatFileServiceGetResponse.__proto__),
    legacyResponse: dart.finalFieldType(dart.legacy(file_fetcher.FileFetcherResponse)),
    [_receivedTime]: dart.finalFieldType(dart.legacy(core.DateTime))
  }));
  var _store = dart.privateName(cache_manager, "_store");
  var _webHelper = dart.privateName(cache_manager, "_webHelper");
  var _fileDir = dart.privateName(cache_manager, "_fileDir");
  var _cacheKey$ = dart.privateName(cache_manager, "_cacheKey");
  var C4;
  var _createCacheStore = dart.privateName(cache_manager, "_createCacheStore");
  var _pushFileToStream = dart.privateName(cache_manager, "_pushFileToStream");
  var C5;
  var _createFileDir = dart.privateName(cache_manager, "_createFileDir");
  var _createStoreForWeb = dart.privateName(cache_manager, "_createStoreForWeb");
  var C6;
  cache_manager.BaseCacheManager = class BaseCacheManager extends core.Object {
    get store() {
      return this[_store];
    }
    get webHelper() {
      return this[_webHelper];
    }
    getSingleFile(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(FileL(), (function* getSingleFile() {
        let cacheFile = (yield this.getFileFromCache(url));
        if (cacheFile != null) {
          if (dart.test(cacheFile.validTill.isBefore(new core.DateTime.now()))) {
            pedantic.unawaited(this.downloadFile(url, {authHeaders: headers}));
          }
          return cacheFile.file;
        }
        return (yield this.downloadFile(url, {authHeaders: headers})).file;
      }).bind(this));
    }
    getFile(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return this.getFileStream(url, {withProgress: false}).map(FileInfoL(), dart.fn(r => FileInfoL().as(r), FileResponseLToFileInfoL()));
    }
    getFileStream(url, opts) {
      let t2;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let withProgress = opts && 'withProgress' in opts ? opts.withProgress : null;
      let streamController = StreamControllerOfFileResponseL().new();
      this[_pushFileToStream](streamController, url, headers, (t2 = withProgress, t2 == null ? false : t2));
      return streamController.stream;
    }
    [_pushFileToStream](streamController, url, headers, withProgress) {
      return async.async(dart.void, (function* _pushFileToStream() {
        let cacheFile = null;
        try {
          cacheFile = (yield this.getFileFromCache(url));
          if (cacheFile != null) {
            streamController.add(cacheFile);
            withProgress = false;
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          core.print("CacheManager: Failed to load cached file for " + dart.str(url) + " with error:\n" + dart.str(e));
        }
        if (cacheFile == null || dart.test(cacheFile.validTill.isBefore(new core.DateTime.now()))) {
          try {
            let iter = async.StreamIterator.new(this[_webHelper].downloadFile(url, {authHeaders: headers}));
            try {
              while (yield iter.moveNext()) {
                let response = iter.current;
                {
                  if (DownloadProgressL().is(response) && dart.test(withProgress)) {
                    streamController.add(response);
                  }
                  if (FileInfoL().is(response)) {
                    streamController.add(response);
                  }
                }
              }
            } finally {
              yield iter.cancel();
            }
          } catch (e$0) {
            let e = dart.getThrown(e$0);
            if (!dart.test(dart.fn(() => {
              core.print("CacheManager: Failed to download file from " + dart.str(url) + " with error:\n" + dart.str(e));
              return true;
            }, VoidToboolL())())) dart.assertFailed(null, L2, 179, 16, "() {\n          print(\n              'CacheManager: Failed to download file from $url with error:\\n$e');\n          return true;\n        }()");
            if (cacheFile == null && dart.test(streamController.hasListener)) {
              streamController.addError(e);
            }
          }
        }
        pedantic.unawaited(streamController.close());
      }).bind(this));
    }
    downloadFile(url, opts) {
      let authHeaders = opts && 'authHeaders' in opts ? opts.authHeaders : null;
      let force = opts && 'force' in opts ? opts.force : false;
      return async.async(FileInfoL(), (function* downloadFile() {
        let fileResponse = (yield this[_webHelper].downloadFile(url, {authHeaders: authHeaders, ignoreMemCache: force}).firstWhere(dart.fn(r => FileInfoL().is(r), FileResponseLToboolL())));
        return FileInfoL().as(fileResponse);
      }).bind(this));
    }
    getFileFromCache(url, opts) {
      let ignoreMemCache = opts && 'ignoreMemCache' in opts ? opts.ignoreMemCache : false;
      return this[_store].getFile(url, {ignoreMemCache: ignoreMemCache});
    }
    getFileFromMemory(url) {
      return this[_store].getFileFromMemory(url);
    }
    putFile(url, fileBytes, opts) {
      let eTag = opts && 'eTag' in opts ? opts.eTag : null;
      let maxAge = opts && 'maxAge' in opts ? opts.maxAge : C4 || CT.C4;
      let fileExtension = opts && 'fileExtension' in opts ? opts.fileExtension : "file";
      return async.async(FileL(), (function* putFile() {
        let cacheObject = (yield this[_store].retrieveCacheData(url));
        cacheObject == null ? cacheObject = new cache_object.CacheObject.new(url, {relativePath: dart.str(new uuid.Uuid.new().v1()) + "." + dart.str(fileExtension)}) : null;
        cacheObject.validTill = new core.DateTime.now().add(maxAge);
        cacheObject.eTag = eTag;
        let file = (yield this[_fileDir]).childFile(cacheObject.relativePath);
        let folder = file.parent;
        if (!dart.test(yield folder.exists())) {
          folder.createSync({recursive: true});
        }
        yield file.writeAsBytes(fileBytes);
        pedantic.unawaited(this[_store].putFile(cacheObject));
        return file;
      }).bind(this));
    }
    removeFile(url) {
      return async.async(dart.void, (function* removeFile() {
        let cacheObject = (yield this[_store].retrieveCacheData(url));
        if (cacheObject != null) {
          yield this[_store].removeCachedFile(cacheObject);
        }
      }).bind(this));
    }
    emptyCache() {
      return this[_store].emptyCache();
    }
    [_createFileDir]() {
      return async.async(DirectoryL(), (function* _createFileDir() {
        let fs = C5 || CT.C5;
        let directory = fs.directory(yield this.getFilePath());
        yield directory.create({recursive: true});
        return directory;
      }).bind(this));
    }
    [_createCacheStore](maxSize, maxAge) {
      if (true) {
        return this[_createStoreForWeb]();
      }
      return new cache_store.CacheStore.new(this[_createFileDir](), this[_cacheKey$], maxSize, maxAge);
    }
    [_createStoreForWeb]() {
      if (!true) return null;
      let memDir = memory_file_system.MemoryFileSystem.new().systemTempDirectory.createTemp("cache");
      let cacheObjectProvider = new non_storing_object_provider.NonStoringObjectProvider.new();
      return new cache_store.CacheStore.new(memDir, this[_cacheKey$], 200, C6 || CT.C6, {cacheRepoProvider: FutureOfCacheInfoRepositoryL().value(cacheObjectProvider)});
    }
  };
  (cache_manager.BaseCacheManager.new = function(_cacheKey, opts) {
    let t2, t2$, t2$0, t2$1;
    let maxAgeCacheObject = opts && 'maxAgeCacheObject' in opts ? opts.maxAgeCacheObject : null;
    let maxNrOfCacheObjects = opts && 'maxNrOfCacheObjects' in opts ? opts.maxNrOfCacheObjects : null;
    let fileService = opts && 'fileService' in opts ? opts.fileService : null;
    let cacheStore = opts && 'cacheStore' in opts ? opts.cacheStore : null;
    let webHelper = opts && 'webHelper' in opts ? opts.webHelper : null;
    let fileFetcher = opts && 'fileFetcher' in opts ? opts.fileFetcher : null;
    this[_store] = null;
    this[_webHelper] = null;
    this[_fileDir] = null;
    this[_cacheKey$] = _cacheKey;
    if (!(maxAgeCacheObject == null && maxNrOfCacheObjects == null || cacheStore == null)) dart.assertFailed("When supplying a cacheStore maxAgeCacheObject and maxNrOfCacheObjects will be ignored. Supply these to the store instead.", L2, 72, 9, "(maxAgeCacheObject == null && maxNrOfCacheObjects == null) ||\n            cacheStore == null");
    if (!(fileService == null || fileFetcher == null)) dart.assertFailed("FileService is the replacement of the deprecated FileFetcher. Don't supply both", L2, 75, 12, "fileService == null || fileFetcher == null");
    if (!(fileService == null || webHelper == null)) dart.assertFailed("When you supply a WebHelper the FileService  will be ignored, you have to supply that to the WebHelper", L2, 77, 12, "fileService == null || webHelper == null");
    if (!(fileFetcher == null || webHelper == null)) dart.assertFailed("When you supply a WebHelper the FileFetcher will be ignored, you have to supply that to the WebHelper", L2, 79, 12, "fileFetcher == null || webHelper == null");
    let duration = (t2 = maxAgeCacheObject, t2 == null ? C4 || CT.C4 : t2);
    let maxSize = (t2$ = maxNrOfCacheObjects, t2$ == null ? 200 : t2$);
    this[_store] = (t2$0 = cacheStore, t2$0 == null ? this[_createCacheStore](maxSize, duration) : t2$0);
    this[_fileDir] = this[_store].fileDir;
    if (fileService == null && fileFetcher != null) {
      fileService = new file_service_compat.FileServiceCompat.new(fileFetcher);
    }
    this[_webHelper] = (t2$1 = webHelper, t2$1 == null ? new web_helper.WebHelper.new(this[_store], fileService) : t2$1);
  }).prototype = cache_manager.BaseCacheManager.prototype;
  dart.addTypeTests(cache_manager.BaseCacheManager);
  dart.addTypeCaches(cache_manager.BaseCacheManager);
  dart.setMethodSignature(cache_manager.BaseCacheManager, () => ({
    __proto__: dart.getMethods(cache_manager.BaseCacheManager.__proto__),
    getSingleFile: dart.fnType(dart.legacy(async.Future$(dart.legacy(io.File))), [dart.legacy(core.String)], {headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))}, {}),
    getFile: dart.fnType(dart.legacy(async.Stream$(dart.legacy(file_info.FileInfo))), [dart.legacy(core.String)], {headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))}, {}),
    getFileStream: dart.fnType(dart.legacy(async.Stream$(dart.legacy(file_response.FileResponse))), [dart.legacy(core.String)], {headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), withProgress: dart.legacy(core.bool)}, {}),
    [_pushFileToStream]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(async.StreamController), dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), dart.legacy(core.bool)]),
    downloadFile: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_info.FileInfo))), [dart.legacy(core.String)], {authHeaders: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), force: dart.legacy(core.bool)}, {}),
    getFileFromCache: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_info.FileInfo))), [dart.legacy(core.String)], {ignoreMemCache: dart.legacy(core.bool)}, {}),
    getFileFromMemory: dart.fnType(dart.legacy(file_info.FileInfo), [dart.legacy(core.String)]),
    putFile: dart.fnType(dart.legacy(async.Future$(dart.legacy(io.File))), [dart.legacy(core.String), dart.legacy(typed_data.Uint8List)], {eTag: dart.legacy(core.String), fileExtension: dart.legacy(core.String), maxAge: dart.legacy(core.Duration)}, {}),
    removeFile: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)]),
    emptyCache: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    [_createFileDir]: dart.fnType(dart.legacy(async.Future$(dart.legacy(directory.Directory))), []),
    [_createCacheStore]: dart.fnType(dart.legacy(cache_store.CacheStore), [dart.legacy(core.int), dart.legacy(core.Duration)]),
    [_createStoreForWeb]: dart.fnType(dart.legacy(cache_store.CacheStore), [])
  }));
  dart.setGetterSignature(cache_manager.BaseCacheManager, () => ({
    __proto__: dart.getGetters(cache_manager.BaseCacheManager.__proto__),
    store: dart.legacy(cache_store.CacheStore),
    webHelper: dart.legacy(web_helper.WebHelper)
  }));
  dart.setLibraryUri(cache_manager.BaseCacheManager, L3);
  dart.setFieldSignature(cache_manager.BaseCacheManager, () => ({
    __proto__: dart.getFields(cache_manager.BaseCacheManager.__proto__),
    [_cacheKey$]: dart.finalFieldType(dart.legacy(core.String)),
    [_store]: dart.fieldType(dart.legacy(cache_store.CacheStore)),
    [_webHelper]: dart.fieldType(dart.legacy(web_helper.WebHelper)),
    [_fileDir]: dart.fieldType(dart.legacy(async.Future$(dart.legacy(directory.Directory))))
  }));
  cache_manager.DefaultCacheManager = class DefaultCacheManager extends cache_manager.BaseCacheManager {
    static new() {
      cache_manager.DefaultCacheManager._instance == null ? cache_manager.DefaultCacheManager._instance = new cache_manager.DefaultCacheManager.__() : null;
      return cache_manager.DefaultCacheManager._instance;
    }
    getFilePath() {
      return async.async(StringL(), function* getFilePath() {
        let directory = (yield path_provider.getTemporaryDirectory());
        return path.join(directory.path, "libCachedImageData");
      });
    }
  };
  (cache_manager.DefaultCacheManager.__ = function() {
    cache_manager.DefaultCacheManager.__proto__.new.call(this, "libCachedImageData");
    ;
  }).prototype = cache_manager.DefaultCacheManager.prototype;
  dart.addTypeTests(cache_manager.DefaultCacheManager);
  dart.addTypeCaches(cache_manager.DefaultCacheManager);
  dart.setMethodSignature(cache_manager.DefaultCacheManager, () => ({
    __proto__: dart.getMethods(cache_manager.DefaultCacheManager.__proto__),
    getFilePath: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [])
  }));
  dart.setLibraryUri(cache_manager.DefaultCacheManager, L3);
  dart.defineLazy(cache_manager.DefaultCacheManager, {
    /*cache_manager.DefaultCacheManager.key*/get key() {
      return "libCachedImageData";
    },
    /*cache_manager.DefaultCacheManager._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, true);
  dart.trackLibraries("packages/flutter_cache_manager/src/web/web_helper.dart", {
    "package:flutter_cache_manager/src/web/web_helper.dart": web_helper,
    "package:flutter_cache_manager/src/compat/file_service_compat.dart": file_service_compat,
    "package:flutter_cache_manager/src/cache_manager.dart": cache_manager,
    "package:flutter_cache_manager/flutter_cache_manager.dart": flutter_cache_manager
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["web_helper.dart","../compat/file_service_compat.dart","../cache_manager.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/flutter_cache_manager/src/web/web_helper.dart.lib.js"}');
  // Exports:
  return {
    src__web__web_helper: web_helper,
    src__compat__file_service_compat: file_service_compat,
    src__cache_manager: cache_manager,
    flutter_cache_manager: flutter_cache_manager
  };
}));

//# sourceMappingURL=web_helper.dart.lib.js.map
