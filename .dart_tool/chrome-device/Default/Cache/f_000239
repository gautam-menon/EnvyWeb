define(['dart_sdk', 'packages/file/src/backends/memory/style.dart', 'packages/file/src/backends/memory/memory_file_stat.dart', 'packages/file/src/backends/memory/clock.dart', 'packages/file/src/backends/memory/common.dart'], (function load__packages__file__src__backends__memory__node_dart(dart_sdk, packages__file__src__backends__memory__style$46dart, packages__file__src__backends__memory__memory_file_stat$46dart, packages__file__src__backends__memory__clock$46dart, packages__file__src__backends__memory__common$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const io = dart_sdk.io;
  const _js_helper = dart_sdk._js_helper;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const style = packages__file__src__backends__memory__style$46dart.src__backends__memory__style;
  const memory_file_stat = packages__file__src__backends__memory__memory_file_stat$46dart.src__backends__memory__memory_file_stat;
  const clock = packages__file__src__backends__memory__clock$46dart.src__backends__memory__clock;
  const common = packages__file__src__backends__memory__common$46dart.src__backends__memory__common;
  var node = Object.create(dart.library);
  var $length = dartx.length;
  var $setRange = dartx.setRange;
  var $sublist = dartx.sublist;
  var $isNotEmpty = dartx.isNotEmpty;
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var NodeL = () => (NodeL = dart.constFn(dart.legacy(node.Node)))();
  var IdentityMapOfStringL$NodeL = () => (IdentityMapOfStringL$NodeL = dart.constFn(_js_helper.IdentityMap$(StringL(), NodeL())))();
  var DirectoryNodeL = () => (DirectoryNodeL = dart.constFn(dart.legacy(node.DirectoryNode)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var DirectoryNodeLAndStringLAndNodeL__ToNodeL = () => (DirectoryNodeLAndStringLAndNodeL__ToNodeL = dart.constFn(dart.fnType(NodeL(), [DirectoryNodeL(), StringL(), NodeL(), intL(), intL()])))();
  var VoidToStringL = () => (VoidToStringL = dart.constFn(dart.fnType(StringL(), [])))();
  var FileSystemExceptionL = () => (FileSystemExceptionL = dart.constFn(dart.legacy(io.FileSystemException)))();
  const CT = Object.create(null);
  var L0 = "package:file/src/backends/memory/node.dart";
  var L1 = "file:///C:/Users/HP/Downloads/flutter/.pub-cache/hosted/pub.dartlang.org/file-5.2.1/lib/src/backends/memory/node.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: io.FileSystemException.prototype,
        [FileSystemException_osError]: null,
        [FileSystemException_path]: "",
        [FileSystemException_message]: "All nodes must have a parent."
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: io.FileSystemException.prototype,
        [FileSystemException_osError]: null,
        [FileSystemException_path]: "",
        [FileSystemException_message]: "A directory cannot be its own ancestor."
      });
    }
  }, false);
  node.NodeBasedFileSystem = class NodeBasedFileSystem extends core.Object {};
  (node.NodeBasedFileSystem.new = function() {
    ;
  }).prototype = node.NodeBasedFileSystem.prototype;
  dart.addTypeTests(node.NodeBasedFileSystem);
  dart.addTypeCaches(node.NodeBasedFileSystem);
  node.NodeBasedFileSystem[dart.implements] = () => [style.StyleableFileSystem];
  dart.setLibraryUri(node.NodeBasedFileSystem, L0);
  var _parent$ = dart.privateName(node, "_parent");
  var FileSystemException_osError = dart.privateName(io, "FileSystemException.osError");
  var FileSystemException_path = dart.privateName(io, "FileSystemException.path");
  var FileSystemException_message = dart.privateName(io, "FileSystemException.message");
  var C0;
  var C1;
  node.Node = class Node extends core.Object {
    get parent() {
      return this[_parent$];
    }
    set parent(parent) {
      if (!(parent != null)) dart.assertFailed(null, L1, 114, 12, "parent != null");
      let ancestor = parent;
      while (!dart.test(ancestor.isRoot)) {
        if (dart.equals(ancestor, this)) {
          dart.throw(C1 || CT.C1);
        }
        ancestor = ancestor.parent;
      }
      this[_parent$] = parent;
    }
    get directory() {
      return this[_parent$];
    }
    get isRoot() {
      return false;
    }
    get fs() {
      return this[_parent$].fs;
    }
  };
  (node.Node.new = function(_parent) {
    this[_parent$] = _parent;
    if (this[_parent$] == null && !dart.test(this.isRoot)) {
      dart.throw(C0 || CT.C0);
    }
  }).prototype = node.Node.prototype;
  dart.addTypeTests(node.Node);
  dart.addTypeCaches(node.Node);
  dart.setGetterSignature(node.Node, () => ({
    __proto__: dart.getGetters(node.Node.__proto__),
    parent: dart.legacy(node.DirectoryNode),
    directory: dart.legacy(node.DirectoryNode),
    isRoot: dart.legacy(core.bool),
    fs: dart.legacy(node.NodeBasedFileSystem)
  }));
  dart.setSetterSignature(node.Node, () => ({
    __proto__: dart.getSetters(node.Node.__proto__),
    parent: dart.legacy(node.DirectoryNode)
  }));
  dart.setLibraryUri(node.Node, L0);
  dart.setFieldSignature(node.Node, () => ({
    __proto__: dart.getFields(node.Node.__proto__),
    [_parent$]: dart.fieldType(dart.legacy(node.DirectoryNode))
  }));
  var changed = dart.privateName(node, "RealNode.changed");
  var modified = dart.privateName(node, "RealNode.modified");
  var accessed = dart.privateName(node, "RealNode.accessed");
  var mode = dart.privateName(node, "RealNode.mode");
  node.RealNode = class RealNode extends node.Node {
    get changed() {
      return this[changed];
    }
    set changed(value) {
      this[changed] = value;
    }
    get modified() {
      return this[modified];
    }
    set modified(value) {
      this[modified] = value;
    }
    get accessed() {
      return this[accessed];
    }
    set accessed(value) {
      this[accessed] = value;
    }
    get mode() {
      return this[mode];
    }
    set mode(value) {
      this[mode] = value;
    }
    get clock() {
      return this.parent.clock;
    }
    get stat() {
      return new memory_file_stat.MemoryFileStat.new(new core.DateTime.fromMillisecondsSinceEpoch(this.changed), new core.DateTime.fromMillisecondsSinceEpoch(this.modified), new core.DateTime.fromMillisecondsSinceEpoch(this.accessed), this.type, this.mode, this.size);
    }
    touch() {
      this.modified = this.clock.now.millisecondsSinceEpoch;
    }
  };
  (node.RealNode.new = function(parent) {
    this[changed] = null;
    this[modified] = null;
    this[accessed] = null;
    this[mode] = 1911;
    node.RealNode.__proto__.new.call(this, parent);
    let now = this.clock.now.millisecondsSinceEpoch;
    this.changed = now;
    this.modified = now;
    this.accessed = now;
  }).prototype = node.RealNode.prototype;
  dart.addTypeTests(node.RealNode);
  dart.addTypeCaches(node.RealNode);
  dart.setMethodSignature(node.RealNode, () => ({
    __proto__: dart.getMethods(node.RealNode.__proto__),
    touch: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(node.RealNode, () => ({
    __proto__: dart.getGetters(node.RealNode.__proto__),
    clock: dart.legacy(clock.Clock),
    stat: dart.legacy(io.FileStat)
  }));
  dart.setLibraryUri(node.RealNode, L0);
  dart.setFieldSignature(node.RealNode, () => ({
    __proto__: dart.getFields(node.RealNode.__proto__),
    changed: dart.fieldType(dart.legacy(core.int)),
    modified: dart.fieldType(dart.legacy(core.int)),
    accessed: dart.fieldType(dart.legacy(core.int)),
    mode: dart.fieldType(dart.legacy(core.int))
  }));
  var children = dart.privateName(node, "DirectoryNode.children");
  node.DirectoryNode = class DirectoryNode extends node.RealNode {
    get children() {
      return this[children];
    }
    set children(value) {
      super.children = value;
    }
    get type() {
      return io.FileSystemEntityType.directory;
    }
    get directory() {
      return this;
    }
    get size() {
      return 0;
    }
  };
  (node.DirectoryNode.new = function(parent) {
    this[children] = new (IdentityMapOfStringL$NodeL()).new();
    node.DirectoryNode.__proto__.new.call(this, parent);
    ;
  }).prototype = node.DirectoryNode.prototype;
  dart.addTypeTests(node.DirectoryNode);
  dart.addTypeCaches(node.DirectoryNode);
  dart.setGetterSignature(node.DirectoryNode, () => ({
    __proto__: dart.getGetters(node.DirectoryNode.__proto__),
    type: dart.legacy(io.FileSystemEntityType),
    size: dart.legacy(core.int)
  }));
  dart.setLibraryUri(node.DirectoryNode, L0);
  dart.setFieldSignature(node.DirectoryNode, () => ({
    __proto__: dart.getFields(node.DirectoryNode.__proto__),
    children: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(node.Node))))
  }));
  var fs$ = dart.privateName(node, "RootNode.fs");
  node.RootNode = class RootNode extends node.DirectoryNode {
    get fs() {
      return this[fs$];
    }
    set fs(value) {
      super.fs = value;
    }
    get clock() {
      return this.fs.clock;
    }
    get parent() {
      return this;
    }
    get isRoot() {
      return true;
    }
    set parent(parent) {
      return dart.throw(new core.UnsupportedError.new("Cannot set the parent of the root directory."));
    }
  };
  (node.RootNode.new = function(fs) {
    this[fs$] = fs;
    if (!(fs != null)) dart.assertFailed(null, L1, 214, 16, "fs != null");
    if (!(fs.root == null)) dart.assertFailed(null, L1, 215, 16, "fs.root == null");
    node.RootNode.__proto__.new.call(this, null);
    ;
  }).prototype = node.RootNode.prototype;
  dart.addTypeTests(node.RootNode);
  dart.addTypeCaches(node.RootNode);
  dart.setLibraryUri(node.RootNode, L0);
  dart.setFieldSignature(node.RootNode, () => ({
    __proto__: dart.getFields(node.RootNode.__proto__),
    fs: dart.finalFieldType(dart.legacy(node.NodeBasedFileSystem))
  }));
  var _content = dart.privateName(node, "_content");
  node.FileNode = class FileNode extends node.RealNode {
    get content() {
      return this[_content];
    }
    get type() {
      return io.FileSystemEntityType.file;
    }
    get size() {
      return this[_content][$length];
    }
    write(bytes) {
      let existing = this[_content];
      this[_content] = _native_typed_data.NativeUint8List.new(dart.notNull(existing[$length]) + dart.notNull(bytes[$length]));
      this[_content][$setRange](0, existing[$length], existing);
      this[_content][$setRange](existing[$length], this[_content][$length], bytes);
    }
    truncate(length) {
      if (!(dart.notNull(length) >= 0)) dart.assertFailed(null, L1, 262, 12, "length >= 0");
      if (!(dart.notNull(length) <= dart.notNull(this[_content][$length]))) dart.assertFailed(null, L1, 263, 12, "length <= _content.length");
      this[_content] = this[_content][$sublist](0, length);
    }
    clear() {
      this[_content] = _native_typed_data.NativeUint8List.new(0);
    }
    copyFrom(source) {
      this.modified = this.changed = this.clock.now.millisecondsSinceEpoch;
      this.accessed = source.accessed;
      this.mode = source.mode;
      this[_content] = _native_typed_data.NativeUint8List.fromList(source.content);
    }
  };
  (node.FileNode.new = function(parent) {
    this[_content] = _native_typed_data.NativeUint8List.new(0);
    node.FileNode.__proto__.new.call(this, parent);
    ;
  }).prototype = node.FileNode.prototype;
  dart.addTypeTests(node.FileNode);
  dart.addTypeCaches(node.FileNode);
  dart.setMethodSignature(node.FileNode, () => ({
    __proto__: dart.getMethods(node.FileNode.__proto__),
    write: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int)))]),
    truncate: dart.fnType(dart.void, [dart.legacy(core.int)]),
    clear: dart.fnType(dart.void, []),
    copyFrom: dart.fnType(dart.void, [dart.legacy(node.FileNode)])
  }));
  dart.setGetterSignature(node.FileNode, () => ({
    __proto__: dart.getGetters(node.FileNode.__proto__),
    content: dart.legacy(typed_data.Uint8List),
    type: dart.legacy(io.FileSystemEntityType),
    size: dart.legacy(core.int)
  }));
  dart.setLibraryUri(node.FileNode, L0);
  dart.setFieldSignature(node.FileNode, () => ({
    __proto__: dart.getFields(node.FileNode.__proto__),
    [_content]: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  var _reentrant = dart.privateName(node, "_reentrant");
  var target$ = dart.privateName(node, "LinkNode.target");
  node.LinkNode = class LinkNode extends node.Node {
    get target() {
      return this[target$];
    }
    set target(value) {
      this[target$] = value;
    }
    getReferent(opts) {
      let tailVisitor = opts && 'tailVisitor' in opts ? opts.tailVisitor : null;
      let referent = this.fs.findNode(this.target, {reference: this, segmentVisitor: dart.fn((parent, childName, child, currentSegment, finalSegment) => {
          if (tailVisitor != null && currentSegment == finalSegment) {
            child = tailVisitor(parent, childName, child);
          }
          return child;
        }, DirectoryNodeLAndStringLAndNodeL__ToNodeL())});
      common.checkExists(referent, dart.fn(() => this.target, VoidToStringL()));
      return referent;
    }
    get referentOrNull() {
      try {
        return this.getReferent();
      } catch (e) {
        let ex = dart.getThrown(e);
        if (FileSystemExceptionL().is(ex)) {
          return null;
        } else
          throw e;
      }
    }
    get type() {
      return io.FileSystemEntityType.link;
    }
    get stat() {
      if (dart.test(this[_reentrant])) {
        return memory_file_stat.MemoryFileStat.notFound;
      }
      this[_reentrant] = true;
      try {
        let node = this.referentOrNull;
        return node == null ? memory_file_stat.MemoryFileStat.notFound : node.stat;
      } finally {
        this[_reentrant] = false;
      }
    }
  };
  (node.LinkNode.new = function(parent, target) {
    this[_reentrant] = false;
    this[target$] = target;
    if (!(target != null && target[$isNotEmpty])) dart.assertFailed(null, L1, 288, 16, "target != null && target.isNotEmpty");
    node.LinkNode.__proto__.new.call(this, parent);
    ;
  }).prototype = node.LinkNode.prototype;
  dart.addTypeTests(node.LinkNode);
  dart.addTypeCaches(node.LinkNode);
  dart.setMethodSignature(node.LinkNode, () => ({
    __proto__: dart.getMethods(node.LinkNode.__proto__),
    getReferent: dart.fnType(dart.legacy(node.Node), [], {tailVisitor: dart.legacy(dart.fnType(dart.legacy(node.Node), [dart.legacy(node.DirectoryNode), dart.legacy(core.String), dart.legacy(node.Node)]))}, {})
  }));
  dart.setGetterSignature(node.LinkNode, () => ({
    __proto__: dart.getGetters(node.LinkNode.__proto__),
    referentOrNull: dart.legacy(node.Node),
    type: dart.legacy(io.FileSystemEntityType),
    stat: dart.legacy(io.FileStat)
  }));
  dart.setLibraryUri(node.LinkNode, L0);
  dart.setFieldSignature(node.LinkNode, () => ({
    __proto__: dart.getFields(node.LinkNode.__proto__),
    target: dart.fieldType(dart.legacy(core.String)),
    [_reentrant]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.trackLibraries("packages/file/src/backends/memory/node.dart", {
    "package:file/src/backends/memory/node.dart": node
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["node.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../packages/file/src/backends/memory/node.dart.lib.js"}');
  // Exports:
  return {
    src__backends__memory__node: node
  };
}));

//# sourceMappingURL=node.dart.lib.js.map
